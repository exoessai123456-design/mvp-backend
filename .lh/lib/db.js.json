{
    "sourceFile": "lib/db.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1757263678769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757265267302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,18 @@\n import mongoose from \"mongoose\";\r\n \r\n-const MONGO_URI = process.env.MONGO_URI;\r\n-if (!MONGO_URI) throw new Error(\"Please define MONGO_URI in .env\");\r\n+const connectDB = async () => {\r\n+  if (mongoose.connection.readyState >= 1) return; // reuse existing connection\r\n \r\n-let cached = global.mongoose;\r\n-if (!cached) cached = global.mongoose = { conn: null, promise: null };\r\n-\r\n-export const connectDB = async () => {\r\n-  if (cached.conn) return cached.conn;\r\n-\r\n-  if (!cached.promise) {\r\n-    cached.promise = mongoose.connect(MONGO_URI, {\r\n+  try {\r\n+    await mongoose.connect(process.env.MONGO_URI, {\r\n       useNewUrlParser: true,\r\n       useUnifiedTopology: true,\r\n-    }).then((mongoose) => mongoose);\r\n+    });\r\n+    console.log(\"MongoDB connected\");\r\n+  } catch (err) {\r\n+    console.error(\"MongoDB connection error:\", err);\r\n+    throw new Error(\"MongoDB connection failed\");\r\n   }\r\n-  cached.conn = await cached.promise;\r\n-  return cached.conn;\r\n };\r\n \r\n export default connectDB;\r\n-\r\n-// --- Models ---\r\n-\r\n-const eventSchema = new mongoose.Schema({\r\n-  title: String,\r\n-  date: Date,\r\n-  name: String,\r\n-  phone: String,\r\n-  type: String,\r\n-  createdBy: String,\r\n-  status: { type: String, enum: [\"CONFIRMED\",\"COMPLETED\",\"CANCELLED\",\"DELETED\"], default: \"CONFIRMED\" },\r\n-}, { timestamps: true });\r\n-\r\n-const jobSchema = new mongoose.Schema({\r\n-  eventId: String,\r\n-  name: String,\r\n-  sentTo: String,\r\n-  status: String,\r\n-  date: Date,\r\n-}, { timestamps: true });\r\n-\r\n-export const Event = mongoose\r\n"
                },
                {
                    "date": 1757265587217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import mongoose from \"mongoose\";\r\n \r\n const connectDB = async () => {\r\n-  if (mongoose.connection.readyState >= 1) return; // reuse existing connection\r\n+  if (mongoose.connection.readyState >= 1) return;\r\n \r\n   try {\r\n     await mongoose.connect(process.env.MONGO_URI, {\r\n       useNewUrlParser: true,\r\n@@ -14,5 +14,5 @@\n     throw new Error(\"MongoDB connection failed\");\r\n   }\r\n };\r\n \r\n-export default connectDB;\r\n+export default connectDB; // ✅ default export\r\n"
                },
                {
                    "date": 1757266546424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,47 @@\n+// lib/db.js\r\n import mongoose from \"mongoose\";\r\n \r\n-const connectDB = async () => {\r\n-  if (mongoose.connection.readyState >= 1) return;\r\n+export async function connectDB() {\r\n+  if (mongoose.connections[0].readyState) {\r\n+    // already connected\r\n+    return;\r\n+  }\r\n \r\n   try {\r\n     await mongoose.connect(process.env.MONGO_URI, {\r\n       useNewUrlParser: true,\r\n       useUnifiedTopology: true,\r\n     });\r\n     console.log(\"MongoDB connected\");\r\n-  } catch (err) {\r\n-    console.error(\"MongoDB connection error:\", err);\r\n-    throw new Error(\"MongoDB connection failed\");\r\n+  } catch (error) {\r\n+    console.error(\"MongoDB connection error:\", error);\r\n+    process.exit(1);\r\n   }\r\n-};\r\n+}\r\n \r\n-export default connectDB; // ✅ default export\r\n+// Event model\r\n+const eventSchema = new mongoose.Schema({\r\n+  title: { type: String, required: true },\r\n+  date: { type: String, required: true },\r\n+  name: { type: String, required: true },\r\n+  phone: { type: String, required: true },\r\n+  type: { type: String, required: true },\r\n+  status: {\r\n+    type: String,\r\n+    enum: [\"CONFIRMED\", \"COMPLETED\", \"CANCELLED\", \"DELETED\"],\r\n+    default: \"CONFIRMED\",\r\n+  },\r\n+  createdBy: { type: String, required: true },\r\n+});\r\n+\r\n+export const Event = mongoose.models.Event || mongoose.model(\"Event\", eventSchema);\r\n+\r\n+// Job model (if used)\r\n+const jobSchema = new mongoose.Schema({\r\n+  eventId: { type: String, required: true },\r\n+  status: { type: String, default: \"PENDING\" },\r\n+  sentTo: String,\r\n+  updatedOn: Date,\r\n+});\r\n+\r\n+export const Job = mongoose.models.Job || mongoose.model(\"Job\", jobSchema);\r\n"
                },
                {
                    "date": 1757267235268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,7 @@\n-// lib/db.js\r\n import mongoose from \"mongoose\";\r\n \r\n-export async function connectDB() {\r\n-  if (mongoose.connections[0].readyState) {\r\n-    // already connected\r\n-    return;\r\n-  }\r\n-\r\n+const connectDB = async () => {\r\n   try {\r\n     await mongoose.connect(process.env.MONGO_URI, {\r\n       useNewUrlParser: true,\r\n       useUnifiedTopology: true,\r\n@@ -16,32 +10,29 @@\n   } catch (error) {\r\n     console.error(\"MongoDB connection error:\", error);\r\n     process.exit(1);\r\n   }\r\n-}\r\n+};\r\n \r\n-// Event model\r\n+// Export as default\r\n+export default connectDB;\r\n+\r\n+// Event & Job models\r\n const eventSchema = new mongoose.Schema({\r\n   title: { type: String, required: true },\r\n   date: { type: String, required: true },\r\n   name: { type: String, required: true },\r\n   phone: { type: String, required: true },\r\n   type: { type: String, required: true },\r\n-  status: {\r\n-    type: String,\r\n-    enum: [\"CONFIRMED\", \"COMPLETED\", \"CANCELLED\", \"DELETED\"],\r\n-    default: \"CONFIRMED\",\r\n-  },\r\n+  status: { type: String, enum: [\"CONFIRMED\",\"COMPLETED\",\"CANCELLED\",\"DELETED\"], default: \"CONFIRMED\" },\r\n   createdBy: { type: String, required: true },\r\n });\r\n \r\n-export const Event = mongoose.models.Event || mongoose.model(\"Event\", eventSchema);\r\n-\r\n-// Job model (if used)\r\n const jobSchema = new mongoose.Schema({\r\n   eventId: { type: String, required: true },\r\n   status: { type: String, default: \"PENDING\" },\r\n-  sentTo: String,\r\n-  updatedOn: Date,\r\n+  sentTo: { type: String, required: true },\r\n+  updatedOn: { type: Date },\r\n });\r\n \r\n+export const Event = mongoose.models.Event || mongoose.model(\"Event\", eventSchema);\r\n export const Job = mongoose.models.Job || mongoose.model(\"Job\", jobSchema);\r\n"
                },
                {
                    "date": 1757267517774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,16 @@\n import mongoose from \"mongoose\";\r\n+import Event from \"../models/event.js\";\r\n+import Job from \"../models/job.js\";\r\n+import Admin from \"../models/admin.js\";\r\n \r\n const connectDB = async () => {\r\n-  try {\r\n-    await mongoose.connect(process.env.MONGO_URI, {\r\n-      useNewUrlParser: true,\r\n-      useUnifiedTopology: true,\r\n-    });\r\n-    console.log(\"MongoDB connected\");\r\n-  } catch (error) {\r\n-    console.error(\"MongoDB connection error:\", error);\r\n-    process.exit(1);\r\n-  }\r\n+  if (mongoose.connections[0].readyState) return; // reuse existing connection\r\n+  await mongoose.connect(process.env.MONGO_URI, {\r\n+    useNewUrlParser: true,\r\n+    useUnifiedTopology: true,\r\n+  });\r\n+  console.log(\"MongoDB connected\");\r\n };\r\n \r\n-// Export as default\r\n export default connectDB;\r\n-\r\n-// Event & Job models\r\n-const eventSchema = new mongoose.Schema({\r\n-  title: { type: String, required: true },\r\n-  date: { type: String, required: true },\r\n-  name: { type: String, required: true },\r\n-  phone: { type: String, required: true },\r\n-  type: { type: String, required: true },\r\n-  status: { type: String, enum: [\"CONFIRMED\",\"COMPLETED\",\"CANCELLED\",\"DELETED\"], default: \"CONFIRMED\" },\r\n-  createdBy: { type: String, required: true },\r\n-});\r\n-\r\n-const jobSchema = new mongoose.Schema({\r\n-  eventId: { type: String, required: true },\r\n-  status: { type: String, default: \"PENDING\" },\r\n-  sentTo: { type: String, required: true },\r\n-  updatedOn: { type: Date },\r\n-});\r\n-\r\n-export const Event = mongoose.models.Event || mongoose.model(\"Event\", eventSchema);\r\n-export const Job = mongoose.models.Job || mongoose.model(\"Job\", jobSchema);\r\n+export { Event, Job, Admin };\r\n"
                },
                {
                    "date": 1757269590309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,14 @@\n+// lib/db.js\r\n import mongoose from \"mongoose\";\r\n-import Event from \"../models/event.js\";\r\n-import Job from \"../models/job.js\";\r\n-import Admin from \"../models/admin.js\";\r\n+import EventModel from \"../models/event.js\";\r\n+import AdminModel from \"../models/admin.js\";\r\n \r\n const connectDB = async () => {\r\n-  if (mongoose.connections[0].readyState) return; // reuse existing connection\r\n-  await mongoose.connect(process.env.MONGO_URI, {\r\n-    useNewUrlParser: true,\r\n-    useUnifiedTopology: true,\r\n-  });\r\n-  console.log(\"MongoDB connected\");\r\n+  if (mongoose.connections[0].readyState) return;\r\n+  await mongoose.connect(process.env.MONGO_URI);\r\n };\r\n \r\n-export default connectDB;\r\n-export { Event, Job, Admin };\r\n+const Event = mongoose.models.Event || EventModel;\r\n+const Admin = mongoose.models.Admin || AdminModel;\r\n+\r\n+export { connectDB, Event, Admin };\r\n"
                },
                {
                    "date": 1757269803416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,23 @@\n-// lib/db.js\r\n import mongoose from \"mongoose\";\r\n-import EventModel from \"../models/event.js\";\r\n-import AdminModel from \"../models/admin.js\";\r\n \r\n const connectDB = async () => {\r\n-  if (mongoose.connections[0].readyState) return;\r\n-  await mongoose.connect(process.env.MONGO_URI);\r\n+  try {\r\n+    await mongoose.connect(process.env.MONGO_URI, {\r\n+      useNewUrlParser: true,\r\n+      useUnifiedTopology: true,\r\n+    });\r\n+    console.log(\"MongoDB connected\");\r\n+  } catch (error) {\r\n+    console.error(\"MongoDB connection error:\", error);\r\n+    process.exit(1);\r\n+  }\r\n };\r\n \r\n-const Event = mongoose.models.Event || EventModel;\r\n-const Admin = mongoose.models.Admin || AdminModel;\r\n+export default connectDB;\r\n \r\n-export { connectDB, Event, Admin };\r\n+// Optional: export models\r\n+const eventSchema = new mongoose.Schema({ /* ... */ });\r\n+export const Event = mongoose.models.Event || mongoose.model(\"Event\", eventSchema);\r\n+\r\n+const jobSchema = new mongoose.Schema({ /* ... */ });\r\n+export const Job = mongoose.models.Job || mongoose.model(\"Job\", jobSchema);\r\n"
                },
                {
                    "date": 1757269927278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,12 @@\n+// lib/db.js\r\n import mongoose from \"mongoose\";\r\n \r\n const connectDB = async () => {\r\n-  try {\r\n-    await mongoose.connect(process.env.MONGO_URI, {\r\n-      useNewUrlParser: true,\r\n-      useUnifiedTopology: true,\r\n-    });\r\n-    console.log(\"MongoDB connected\");\r\n-  } catch (error) {\r\n-    console.error(\"MongoDB connection error:\", error);\r\n-    process.exit(1);\r\n-  }\r\n+  if (mongoose.connections[0].readyState) return; // already connected\r\n+  await mongoose.connect(process.env.MONGO_URI, {\r\n+    useNewUrlParser: true,\r\n+    useUnifiedTopology: true,\r\n+  });\r\n };\r\n \r\n export default connectDB;\r\n-\r\n-// Optional: export models\r\n-const eventSchema = new mongoose.Schema({ /* ... */ });\r\n-export const Event = mongoose.models.Event || mongoose.model(\"Event\", eventSchema);\r\n-\r\n-const jobSchema = new mongoose.Schema({ /* ... */ });\r\n-export const Job = mongoose.models.Job || mongoose.model(\"Job\", jobSchema);\r\n"
                },
                {
                    "date": 1757270034953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,23 @@\n-// lib/db.js\r\n import mongoose from \"mongoose\";\r\n \r\n const connectDB = async () => {\r\n-  if (mongoose.connections[0].readyState) return; // already connected\r\n-  await mongoose.connect(process.env.MONGO_URI, {\r\n-    useNewUrlParser: true,\r\n-    useUnifiedTopology: true,\r\n-  });\r\n+  try {\r\n+    await mongoose.connect(process.env.MONGO_URI, {\r\n+      useNewUrlParser: true,\r\n+      useUnifiedTopology: true,\r\n+    });\r\n+    console.log(\"MongoDB connected\");\r\n+  } catch (error) {\r\n+    console.error(\"MongoDB connection error:\", error);\r\n+    process.exit(1);\r\n+  }\r\n };\r\n \r\n export default connectDB;\r\n+\r\n+// Optional: export models\r\n+const eventSchema = new mongoose.Schema({ /* ... */ });\r\n+export const Event = mongoose.models.Event || mongoose.model(\"Event\", eventSchema);\r\n+\r\n+const jobSchema = new mongoose.Schema({ /* ... */ });\r\n+export const Job = mongoose.models.Job || mongoose.model(\"Job\", jobSchema);\r\n"
                },
                {
                    "date": 1757270239044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,41 @@\n import mongoose from \"mongoose\";\r\n \r\n+// Connect to MongoDB\r\n const connectDB = async () => {\r\n+  if (mongoose.connection.readyState >= 1) return; // already connected\r\n+\r\n   try {\r\n     await mongoose.connect(process.env.MONGO_URI, {\r\n       useNewUrlParser: true,\r\n       useUnifiedTopology: true,\r\n     });\r\n     console.log(\"MongoDB connected\");\r\n-  } catch (error) {\r\n-    console.error(\"MongoDB connection error:\", error);\r\n-    process.exit(1);\r\n+  } catch (err) {\r\n+    console.error(\"MongoDB connection error:\", err);\r\n+    throw new Error(\"MongoDB connection failed\");\r\n   }\r\n };\r\n \r\n export default connectDB;\r\n \r\n // Optional: export models\r\n-const eventSchema = new mongoose.Schema({ /* ... */ });\r\n+const eventSchema = new mongoose.Schema({\r\n+  title: String,\r\n+  date: String,\r\n+  name: String,\r\n+  phone: String,\r\n+  type: String,\r\n+  status: { type: String, enum: [\"CONFIRMED\",\"COMPLETED\",\"CANCELLED\",\"DELETED\"], default: \"CONFIRMED\" },\r\n+  createdBy: String,\r\n+});\r\n export const Event = mongoose.models.Event || mongoose.model(\"Event\", eventSchema);\r\n \r\n-const jobSchema = new mongoose.Schema({ /* ... */ });\r\n+const jobSchema = new mongoose.Schema({\r\n+  eventId: String,\r\n+  createdOn: String,\r\n+  updatedOn: { type: String, default: null },\r\n+  sentTo: String,\r\n+  status: { type: String, enum: [\"PREPARED\",\"SENT\",\"FAILED\"], default: \"PREPARED\" },\r\n+  motifFailure: { type: String, default: null },\r\n+});\r\n export const Job = mongoose.models.Job || mongoose.model(\"Job\", jobSchema);\r\n"
                }
            ],
            "date": 1757263678769,
            "name": "Commit-0",
            "content": "import mongoose from \"mongoose\";\r\n\r\nconst MONGO_URI = process.env.MONGO_URI;\r\nif (!MONGO_URI) throw new Error(\"Please define MONGO_URI in .env\");\r\n\r\nlet cached = global.mongoose;\r\nif (!cached) cached = global.mongoose = { conn: null, promise: null };\r\n\r\nexport const connectDB = async () => {\r\n  if (cached.conn) return cached.conn;\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGO_URI, {\r\n      useNewUrlParser: true,\r\n      useUnifiedTopology: true,\r\n    }).then((mongoose) => mongoose);\r\n  }\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n};\r\n\r\nexport default connectDB;\r\n\r\n// --- Models ---\r\n\r\nconst eventSchema = new mongoose.Schema({\r\n  title: String,\r\n  date: Date,\r\n  name: String,\r\n  phone: String,\r\n  type: String,\r\n  createdBy: String,\r\n  status: { type: String, enum: [\"CONFIRMED\",\"COMPLETED\",\"CANCELLED\",\"DELETED\"], default: \"CONFIRMED\" },\r\n}, { timestamps: true });\r\n\r\nconst jobSchema = new mongoose.Schema({\r\n  eventId: String,\r\n  name: String,\r\n  sentTo: String,\r\n  status: String,\r\n  date: Date,\r\n}, { timestamps: true });\r\n\r\nexport const Event = mongoose\r\n"
        }
    ]
}