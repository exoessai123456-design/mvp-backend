{
    "sourceFile": "api/auth/signup.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1757264565541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757265297899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import connectDB from \"../../lib/db.js\";\r\n-import bcrypt from \"bcryptjs\";\r\n import jwt from \"jsonwebtoken\";\r\n import Admin from \"../../models/admin.js\";\r\n \r\n export default async function handler(req, res) {\r\n@@ -8,18 +7,17 @@\n     res.setHeader(\"Allow\", [\"POST\"]);\r\n     return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n   }\r\n \r\n-  await connectDB(); // connect inside the handler (serverless-safe)\r\n+  await connectDB();\r\n \r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n     let admin = await Admin.findOne({ email });\r\n     if (admin) return res.status(400).json({ msg: \"Admin already exists\" });\r\n \r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    admin = new Admin({ email, password: hashedPassword });\r\n+    admin = new Admin({ email, password }); // pre-save hashes automatically\r\n     await admin.save();\r\n \r\n     const token = jwt.sign(\r\n       { admin: { email: admin.email, _id: admin._id } },\r\n"
                },
                {
                    "date": 1757265599440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,32 @@\n import connectDB from \"../../lib/db.js\";\r\n+import Admin from \"../../models/admin.js\";\r\n import jwt from \"jsonwebtoken\";\r\n-import Admin from \"../../models/admin.js\";\r\n \r\n export default async function handler(req, res) {\r\n+  await connectDB(); // ✅ inside handler\r\n+\r\n   if (req.method !== \"POST\") {\r\n     res.setHeader(\"Allow\", [\"POST\"]);\r\n     return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n   }\r\n \r\n-  await connectDB();\r\n-\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n     let admin = await Admin.findOne({ email });\r\n     if (admin) return res.status(400).json({ msg: \"Admin already exists\" });\r\n \r\n-    admin = new Admin({ email, password }); // pre-save hashes automatically\r\n+    admin = new Admin({ email, password });\r\n     await admin.save();\r\n \r\n     const token = jwt.sign(\r\n       { admin: { email: admin.email, _id: admin._id } },\r\n       process.env.JWT_SECRET,\r\n       { expiresIn: \"1h\" }\r\n     );\r\n \r\n-    return res.status(201).json({\r\n-      token,\r\n-      admin: { email: admin.email }\r\n-    });\r\n+    return res.status(201).json({ token, admin: { email: admin.email } });\r\n   } catch (err) {\r\n     console.error(err);\r\n     return res.status(500).send(\"Server error\");\r\n   }\r\n"
                },
                {
                    "date": 1757266614700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import connectDB from \"../../lib/db.js\";\r\n+import { connectDB, Event } from \"../../lib/db.js\";\r\n import Admin from \"../../models/admin.js\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n"
                },
                {
                    "date": 1757267572088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n-import { connectDB, Event } from \"../../lib/db.js\";\r\n-import Admin from \"../../models/admin.js\";\r\n+import connectDB, { Admin } from \"../../lib/db.js\";\r\n+import bcrypt from \"bcryptjs\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n-  await connectDB(); // ✅ inside handler\r\n+  await connectDB();\r\n \r\n   if (req.method !== \"POST\") {\r\n     res.setHeader(\"Allow\", [\"POST\"]);\r\n     return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n@@ -12,21 +12,17 @@\n \r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n-    let admin = await Admin.findOne({ email });\r\n-    if (admin) return res.status(400).json({ msg: \"Admin already exists\" });\r\n+    const existing = await Admin.findOne({ email });\r\n+    if (existing) return res.status(400).json({ msg: \"Admin already exists\" });\r\n \r\n-    admin = new Admin({ email, password });\r\n+    const hashed = await bcrypt.hash(password, 10);\r\n+    const admin = new Admin({ email, password: hashed });\r\n     await admin.save();\r\n \r\n-    const token = jwt.sign(\r\n-      { admin: { email: admin.email, _id: admin._id } },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: \"1h\" }\r\n-    );\r\n-\r\n-    return res.status(201).json({ token, admin: { email: admin.email } });\r\n+    const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET);\r\n+    return res.json({ token });\r\n   } catch (err) {\r\n     console.error(err);\r\n     return res.status(500).send(\"Server error\");\r\n   }\r\n"
                },
                {
                    "date": 1757270379900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,26 @@\n-import connectDB, { Admin } from \"../../lib/db.js\";\r\n-import bcrypt from \"bcryptjs\";\r\n+import connectDB from \"../../lib/db.js\";\r\n+import Admin from \"../../models/admin.js\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n-  await connectDB();\r\n-\r\n   if (req.method !== \"POST\") {\r\n     res.setHeader(\"Allow\", [\"POST\"]);\r\n     return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n   }\r\n \r\n+  await connectDB();\r\n+\r\n   const { email, password } = req.body;\r\n-\r\n   try {\r\n-    const existing = await Admin.findOne({ email });\r\n-    if (existing) return res.status(400).json({ msg: \"Admin already exists\" });\r\n+    let admin = await Admin.findOne({ email });\r\n+    if (admin) return res.status(400).json({ msg: \"Admin already exists\" });\r\n \r\n-    const hashed = await bcrypt.hash(password, 10);\r\n-    const admin = new Admin({ email, password: hashed });\r\n+    admin = new Admin({ email, password });\r\n     await admin.save();\r\n \r\n-    const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET);\r\n-    return res.json({ token });\r\n+    const token = jwt.sign({ admin: { email: admin.email, _id: admin._id } }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n+    return res.status(201).json({ token });\r\n   } catch (err) {\r\n     console.error(err);\r\n     return res.status(500).send(\"Server error\");\r\n   }\r\n"
                },
                {
                    "date": 1757439929970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,27 @@\n+import connectDB from \"../../lib/db.js\";\r\n+import Admin from \"../../models/admin.js\";\r\n+import jwt from \"jsonwebtoken\";\r\n+import { withCors } from \"../../lib/middleware.js\";\r\n+export default async function handler(req, res) {\r\n+  if (req.method !== \"POST\") {\r\n+    res.setHeader(\"Allow\", [\"POST\"]);\r\n+    return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n+  }\r\n+\r\n+  await connectDB();\r\n+\r\n+  const { email, password } = req.body;\r\n+  try {\r\n+    let admin = await Admin.findOne({ email });\r\n+    if (admin) return res.status(400).json({ msg: \"Admin already exists\" });\r\n+\r\n+    admin = new Admin({ email, password });\r\n+    await admin.save();\r\n+\r\n+    const token = jwt.sign({ admin: { email: admin.email, _id: admin._id } }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n+    return res.status(201).json({ token });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    return res.status(500).send(\"Server error\");\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1757439938007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n import connectDB from \"../../lib/db.js\";\r\n import Admin from \"../../models/admin.js\";\r\n import jwt from \"jsonwebtoken\";\r\n import { withCors } from \"../../lib/middleware.js\";\r\n-export default async function handler(req, res) {\r\n+\r\n+ async function handler(req, res) {\r\n   if (req.method !== \"POST\") {\r\n     res.setHeader(\"Allow\", [\"POST\"]);\r\n     return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n   }\r\n@@ -24,31 +25,6 @@\n     console.error(err);\r\n     return res.status(500).send(\"Server error\");\r\n   }\r\n }\r\n-import connectDB from \"../../lib/db.js\";\r\n-import Admin from \"../../models/admin.js\";\r\n-import jwt from \"jsonwebtoken\";\r\n \r\n-export default async function handler(req, res) {\r\n-  if (req.method !== \"POST\") {\r\n-    res.setHeader(\"Allow\", [\"POST\"]);\r\n-    return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n-  }\r\n \r\n-  await connectDB();\r\n-\r\n-  const { email, password } = req.body;\r\n-  try {\r\n-    let admin = await Admin.findOne({ email });\r\n-    if (admin) return res.status(400).json({ msg: \"Admin already exists\" });\r\n-\r\n-    admin = new Admin({ email, password });\r\n-    await admin.save();\r\n-\r\n-    const token = jwt.sign({ admin: { email: admin.email, _id: admin._id } }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n-    return res.status(201).json({ token });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    return res.status(500).send(\"Server error\");\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1757439944331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,4 +27,5 @@\n   }\r\n }\r\n \r\n \r\n+export default withCors(handler);\n\\ No newline at end of file\n"
                }
            ],
            "date": 1757264565541,
            "name": "Commit-0",
            "content": "import connectDB from \"../../lib/db.js\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport Admin from \"../../models/admin.js\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    res.setHeader(\"Allow\", [\"POST\"]);\r\n    return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n  }\r\n\r\n  await connectDB(); // connect inside the handler (serverless-safe)\r\n\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    let admin = await Admin.findOne({ email });\r\n    if (admin) return res.status(400).json({ msg: \"Admin already exists\" });\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    admin = new Admin({ email, password: hashedPassword });\r\n    await admin.save();\r\n\r\n    const token = jwt.sign(\r\n      { admin: { email: admin.email, _id: admin._id } },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: \"1h\" }\r\n    );\r\n\r\n    return res.status(201).json({\r\n      token,\r\n      admin: { email: admin.email }\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    return res.status(500).send(\"Server error\");\r\n  }\r\n}\r\n"
        }
    ]
}