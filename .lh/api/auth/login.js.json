{
    "sourceFile": "api/auth/login.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1757264487249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757265308752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import connectDB from \"../../lib/db.js\";\r\n-import bcrypt from \"bcryptjs\";\r\n import jwt from \"jsonwebtoken\";\r\n import Admin from \"../../models/admin.js\";\r\n \r\n export default async function handler(req, res) {\r\n@@ -8,17 +7,17 @@\n     res.setHeader(\"Allow\", [\"POST\"]);\r\n     return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n   }\r\n \r\n-  await connectDB(); // connect inside handler (serverless safe)\r\n+  await connectDB();\r\n \r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n     const admin = await Admin.findOne({ email });\r\n     if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n \r\n-    const isMatch = await bcrypt.compare(password, admin.password);\r\n+    const isMatch = await admin.comparePassword(password);\r\n     if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n \r\n     const token = jwt.sign(\r\n       { admin: { email: admin.email, _id: admin._id } },\r\n"
                },
                {
                    "date": 1757265610819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,16 @@\n import connectDB from \"../../lib/db.js\";\r\n+import Admin from \"../../models/admin.js\";\r\n import jwt from \"jsonwebtoken\";\r\n-import Admin from \"../../models/admin.js\";\r\n \r\n export default async function handler(req, res) {\r\n+  await connectDB();\r\n+\r\n   if (req.method !== \"POST\") {\r\n     res.setHeader(\"Allow\", [\"POST\"]);\r\n     return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n   }\r\n \r\n-  await connectDB();\r\n-\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n     const admin = await Admin.findOne({ email });\r\n"
                },
                {
                    "date": 1757266623157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import connectDB from \"../../lib/db.js\";\r\n+import { connectDB, Event } from \"../../lib/db.js\";\r\n import Admin from \"../../models/admin.js\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n"
                },
                {
                    "date": 1757267559783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-import { connectDB, Event } from \"../../lib/db.js\";\r\n-import Admin from \"../../models/admin.js\";\r\n+import connectDB, { Admin } from \"../../lib/db.js\";\r\n+import bcrypt from \"bcryptjs\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n   await connectDB();\r\n@@ -15,18 +15,13 @@\n   try {\r\n     const admin = await Admin.findOne({ email });\r\n     if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n \r\n-    const isMatch = await admin.comparePassword(password);\r\n+    const isMatch = await bcrypt.compare(password, admin.password);\r\n     if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n \r\n-    const token = jwt.sign(\r\n-      { admin: { email: admin.email, _id: admin._id } },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: \"1h\" }\r\n-    );\r\n-\r\n-    return res.status(200).json({ token });\r\n+    const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET);\r\n+    return res.json({ token });\r\n   } catch (err) {\r\n     console.error(err);\r\n     return res.status(500).send(\"Server error\");\r\n   }\r\n"
                },
                {
                    "date": 1757269826119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import connectDB, { Admin } from \"../../lib/db.js\";\r\n+import connectDB, { Event, Job } from \"../../lib/db.js\";\r\n import bcrypt from \"bcryptjs\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n"
                },
                {
                    "date": 1757269870476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import connectDB, { Event, Job } from \"../../lib/db.js\";\r\n+import connectDB, { Admin } from \"../../lib/db.js\";\r\n import bcrypt from \"bcryptjs\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n"
                },
                {
                    "date": 1757269959029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n-import connectDB, { Admin } from \"../../lib/db.js\";\r\n+// api/auth/login.js\r\n+import connectDB from \"../../lib/db.js\";\r\n+import Admin from \"../../models/admin.js\"; // ✅ correct import\r\n import bcrypt from \"bcryptjs\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n@@ -12,15 +14,18 @@\n \r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n-    const admin = await Admin.findOne({ email });\r\n+    const admin = await Admin.findOne({ email }); // ✅ now defined\r\n     if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n \r\n     const isMatch = await bcrypt.compare(password, admin.password);\r\n     if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n \r\n-    const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET);\r\n+    const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET, {\r\n+      expiresIn: \"1h\",\r\n+    });\r\n+\r\n     return res.json({ token });\r\n   } catch (err) {\r\n     console.error(err);\r\n     return res.status(500).send(\"Server error\");\r\n"
                },
                {
                    "date": 1757270024799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n-// api/auth/login.js\r\n-import connectDB from \"../../lib/db.js\";\r\n-import Admin from \"../../models/admin.js\"; // ✅ correct import\r\n+import connectDB, { Admin } from \"../../lib/db.js\";\r\n import bcrypt from \"bcryptjs\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n@@ -14,18 +12,15 @@\n \r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n-    const admin = await Admin.findOne({ email }); // ✅ now defined\r\n+    const admin = await Admin.findOne({ email });\r\n     if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n \r\n     const isMatch = await bcrypt.compare(password, admin.password);\r\n     if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n \r\n-    const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET, {\r\n-      expiresIn: \"1h\",\r\n-    });\r\n-\r\n+    const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET);\r\n     return res.json({ token });\r\n   } catch (err) {\r\n     console.error(err);\r\n     return res.status(500).send(\"Server error\");\r\n"
                },
                {
                    "date": 1757270088761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-import connectDB, { Admin } from \"../../lib/db.js\";\r\n-import bcrypt from \"bcryptjs\";\r\n+import { connectDB, Event } from \"../../lib/db.js\";\r\n+import Admin from \"../../models/admin.js\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n   await connectDB();\r\n@@ -15,13 +15,18 @@\n   try {\r\n     const admin = await Admin.findOne({ email });\r\n     if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n \r\n-    const isMatch = await bcrypt.compare(password, admin.password);\r\n+    const isMatch = await admin.comparePassword(password);\r\n     if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n \r\n-    const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET);\r\n-    return res.json({ token });\r\n+    const token = jwt.sign(\r\n+      { admin: { email: admin.email, _id: admin._id } },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: \"1h\" }\r\n+    );\r\n+\r\n+    return res.status(200).json({ token });\r\n   } catch (err) {\r\n     console.error(err);\r\n     return res.status(500).send(\"Server error\");\r\n   }\r\n"
                },
                {
                    "date": 1757270254190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,25 @@\n-import { connectDB, Event } from \"../../lib/db.js\";\r\n+import connectDB from \"../../lib/db.js\";\r\n import Admin from \"../../models/admin.js\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n-  await connectDB();\r\n-\r\n   if (req.method !== \"POST\") {\r\n     res.setHeader(\"Allow\", [\"POST\"]);\r\n     return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n   }\r\n \r\n+  await connectDB();\r\n+\r\n   const { email, password } = req.body;\r\n-\r\n   try {\r\n     const admin = await Admin.findOne({ email });\r\n     if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n \r\n     const isMatch = await admin.comparePassword(password);\r\n     if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n \r\n-    const token = jwt.sign(\r\n-      { admin: { email: admin.email, _id: admin._id } },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: \"1h\" }\r\n-    );\r\n-\r\n+    const token = jwt.sign({ admin: { email: admin.email, _id: admin._id } }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n     return res.status(200).json({ token });\r\n   } catch (err) {\r\n     console.error(err);\r\n     return res.status(500).send(\"Server error\");\r\n"
                },
                {
                    "date": 1757438164200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n import Admin from \"../../models/admin.js\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n+\r\n+  \r\n   if (req.method !== \"POST\") {\r\n     res.setHeader(\"Allow\", [\"POST\"]);\r\n     return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n   }\r\n"
                },
                {
                    "date": 1757438176605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import connectDB from \"../../lib/db.js\";\r\n+import Admin from \"../../models/admin.js\";\r\n+import jwt from \"jsonwebtoken\";\r\n+\r\n+export default async function handler(req, res) {\r\n+   if (req.method === \"OPTIONS\") {\r\n+    res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n+    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n+    res.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");\r\n+    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n+    return res.status(200).end();\r\n+  }\r\n+\r\n+  if (req.method !== \"POST\") {\r\n+    res.setHeader(\"Allow\", [\"POST\"]);\r\n+    return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n+  }\r\n+\r\n+  await connectDB();\r\n+\r\n+  const { email, password } = req.body;\r\n+  try {\r\n+    const admin = await Admin.findOne({ email });\r\n+    if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n+\r\n+    const isMatch = await admin.comparePassword(password);\r\n+    if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n+\r\n+    const token = jwt.sign({ admin: { email: admin.email, _id: admin._id } }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n+    return res.status(200).json({ token });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    return res.status(500).send(\"Server error\");\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1757438193123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import connectDB from \"../../lib/db.js\";\r\n+import Admin from \"../../models/admin.js\";\r\n+import jwt from \"jsonwebtoken\";\r\n+\r\n+export default async function handler(req, res) {\r\n+   if (req.method === \"OPTIONS\") {\r\n+    res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n+    res.setHeader(\"Access-Control-Allow-Origin\", \"*\";\r\n+    res.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");\r\n+    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n+    return res.status(200).end();\r\n+  }\r\n+\r\n+  if (req.method !== \"POST\") {\r\n+    res.setHeader(\"Allow\", [\"POST\"]);\r\n+    return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n+  }\r\n+\r\n+  await connectDB();\r\n+\r\n+  const { email, password } = req.body;\r\n+  try {\r\n+    const admin = await Admin.findOne({ email });\r\n+    if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n+\r\n+    const isMatch = await admin.comparePassword(password);\r\n+    if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n+\r\n+    const token = jwt.sign({ admin: { email: admin.email, _id: admin._id } }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n+    return res.status(200).json({ token });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    return res.status(500).send(\"Server error\");\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1757438199202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import connectDB from \"../../lib/db.js\";\r\n+import Admin from \"../../models/admin.js\";\r\n+import jwt from \"jsonwebtoken\";\r\n+\r\n+export default async function handler(req, res) {\r\n+   if (req.method === \"OPTIONS\") {\r\n+    res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n+    res.setHeader(\"Access-Control-Allow-Origin\", \"http/\");\r\n+    res.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");\r\n+    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n+    return res.status(200).end();\r\n+  }\r\n+\r\n+  if (req.method !== \"POST\") {\r\n+    res.setHeader(\"Allow\", [\"POST\"]);\r\n+    return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n+  }\r\n+\r\n+  await connectDB();\r\n+\r\n+  const { email, password } = req.body;\r\n+  try {\r\n+    const admin = await Admin.findOne({ email });\r\n+    if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n+\r\n+    const isMatch = await admin.comparePassword(password);\r\n+    if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n+\r\n+    const token = jwt.sign({ admin: { email: admin.email, _id: admin._id } }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n+    return res.status(200).json({ token });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    return res.status(500).send(\"Server error\");\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1757438205631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \r\n export default async function handler(req, res) {\r\n    if (req.method === \"OPTIONS\") {\r\n     res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n-    res.setHeader(\"Access-Control-Allow-Origin\", \"http/\");\r\n+    res.setHeader(\"Access-Control-Allow-Origin\", \"http://localhost:\");\r\n     res.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");\r\n     res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n     return res.status(200).end();\r\n   }\r\n@@ -32,103 +32,4 @@\n     console.error(err);\r\n     return res.status(500).send(\"Server error\");\r\n   }\r\n }\r\n-import connectDB from \"../../lib/db.js\";\r\n-import Admin from \"../../models/admin.js\";\r\n-import jwt from \"jsonwebtoken\";\r\n-\r\n-export default async function handler(req, res) {\r\n-   if (req.method === \"OPTIONS\") {\r\n-    res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n-    res.setHeader(\"Access-Control-Allow-Origin\", \"*\";\r\n-    res.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");\r\n-    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n-    return res.status(200).end();\r\n-  }\r\n-\r\n-  if (req.method !== \"POST\") {\r\n-    res.setHeader(\"Allow\", [\"POST\"]);\r\n-    return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n-  }\r\n-\r\n-  await connectDB();\r\n-\r\n-  const { email, password } = req.body;\r\n-  try {\r\n-    const admin = await Admin.findOne({ email });\r\n-    if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n-\r\n-    const isMatch = await admin.comparePassword(password);\r\n-    if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n-\r\n-    const token = jwt.sign({ admin: { email: admin.email, _id: admin._id } }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n-    return res.status(200).json({ token });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    return res.status(500).send(\"Server error\");\r\n-  }\r\n-}\r\n-import connectDB from \"../../lib/db.js\";\r\n-import Admin from \"../../models/admin.js\";\r\n-import jwt from \"jsonwebtoken\";\r\n-\r\n-export default async function handler(req, res) {\r\n-   if (req.method === \"OPTIONS\") {\r\n-    res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n-    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n-    res.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");\r\n-    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n-    return res.status(200).end();\r\n-  }\r\n-\r\n-  if (req.method !== \"POST\") {\r\n-    res.setHeader(\"Allow\", [\"POST\"]);\r\n-    return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n-  }\r\n-\r\n-  await connectDB();\r\n-\r\n-  const { email, password } = req.body;\r\n-  try {\r\n-    const admin = await Admin.findOne({ email });\r\n-    if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n-\r\n-    const isMatch = await admin.comparePassword(password);\r\n-    if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n-\r\n-    const token = jwt.sign({ admin: { email: admin.email, _id: admin._id } }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n-    return res.status(200).json({ token });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    return res.status(500).send(\"Server error\");\r\n-  }\r\n-}\r\n-import connectDB from \"../../lib/db.js\";\r\n-import Admin from \"../../models/admin.js\";\r\n-import jwt from \"jsonwebtoken\";\r\n-\r\n-export default async function handler(req, res) {\r\n-\r\n-  \r\n-  if (req.method !== \"POST\") {\r\n-    res.setHeader(\"Allow\", [\"POST\"]);\r\n-    return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n-  }\r\n-\r\n-  await connectDB();\r\n-\r\n-  const { email, password } = req.body;\r\n-  try {\r\n-    const admin = await Admin.findOne({ email });\r\n-    if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n-\r\n-    const isMatch = await admin.comparePassword(password);\r\n-    if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n-\r\n-    const token = jwt.sign({ admin: { email: admin.email, _id: admin._id } }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n-    return res.status(200).json({ token });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    return res.status(500).send(\"Server error\");\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1757438799095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \r\n export default async function handler(req, res) {\r\n    if (req.method === \"OPTIONS\") {\r\n     res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n-    res.setHeader(\"Access-Control-Allow-Origin\", \"http://localhost:\");\r\n+    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n     res.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");\r\n     res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n     return res.status(200).end();\r\n   }\r\n"
                },
                {
                    "date": 1757438948207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,13 +2,15 @@\n import Admin from \"../../models/admin.js\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n-   if (req.method === \"OPTIONS\") {\r\n-    res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n-    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n-    res.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");\r\n-    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n+   res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n+  res.setHeader(\"Access-Control-Allow-Origin\", \"http://localhost:3001\"); // your frontend\r\n+  res.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");\r\n+  res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n+\r\n+  // ✅ Handle preflight OPTIONS\r\n+  if (req.method === \"OPTIONS\") {\r\n     return res.status(200).end();\r\n   }\r\n \r\n   if (req.method !== \"POST\") {\r\n"
                },
                {
                    "date": 1757439256276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,18 +2,9 @@\n import Admin from \"../../models/admin.js\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n-   res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n-  res.setHeader(\"Access-Control-Allow-Origin\", \"http://localhost:3001\"); // your frontend\r\n-  res.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");\r\n-  res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n-\r\n-  // ✅ Handle preflight OPTIONS\r\n-  if (req.method === \"OPTIONS\") {\r\n-    return res.status(200).end();\r\n-  }\r\n-\r\n+  \r\n   if (req.method !== \"POST\") {\r\n     res.setHeader(\"Allow\", [\"POST\"]);\r\n     return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n   }\r\n"
                },
                {
                    "date": 1757439268580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+import connectDB from \"../../lib/db.js\";\r\n+import Admin from \"../../models/admin.js\";\r\n+import jwt from \"jsonwebtoken\";\r\n+import { cors } from \"@/lib/cors\";\r\n+export default async function handler(req, res) {\r\n+  \r\n+\r\n+  if (req.method !== \"POST\") {\r\n+    res.setHeader(\"Allow\", [\"POST\"]);\r\n+    return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n+  }\r\n+\r\n+  await connectDB();\r\n+\r\n+  const { email, password } = req.body;\r\n+  try {\r\n+    const admin = await Admin.findOne({ email });\r\n+    if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n+\r\n+    const isMatch = await admin.comparePassword(password);\r\n+    if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n+\r\n+    const token = jwt.sign({ admin: { email: admin.email, _id: admin._id } }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n+    return res.status(200).json({ token });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    return res.status(500).send(\"Server error\");\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1757439280761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { cors } from \"@/lib/cors\";\r\n \r\n export default async function handler(req, res) {\r\n   \r\n+  \r\n \r\n   if (req.method !== \"POST\") {\r\n     res.setHeader(\"Allow\", [\"POST\"]);\r\n     return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n"
                },
                {
                    "date": 1757439597332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+import connectDB from \"../../lib/db.js\";\r\n+import Admin from \"../../models/admin.js\";\r\n+import jwt from \"jsonwebtoken\";\r\n+import { cors } from \"@/lib/cors\";\r\n+\r\n+export default async function handler(req, res) {\r\n+\r\n+  if (req.method !== \"POST\") {\r\n+    res.setHeader(\"Allow\", [\"POST\"]);\r\n+    return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n+  }\r\n+\r\n+  await connectDB();\r\n+\r\n+  const { email, password } = req.body;\r\n+  try {\r\n+    const admin = await Admin.findOne({ email });\r\n+    if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n+\r\n+    const isMatch = await admin.comparePassword(password);\r\n+    if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n+\r\n+    const token = jwt.sign({ admin: { email: admin.email, _id: admin._id } }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n+    return res.status(200).json({ token });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    return res.status(500).send(\"Server error\");\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1757264487249,
            "name": "Commit-0",
            "content": "import connectDB from \"../../lib/db.js\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport Admin from \"../../models/admin.js\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    res.setHeader(\"Allow\", [\"POST\"]);\r\n    return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n  }\r\n\r\n  await connectDB(); // connect inside handler (serverless safe)\r\n\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const admin = await Admin.findOne({ email });\r\n    if (!admin) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n\r\n    const isMatch = await bcrypt.compare(password, admin.password);\r\n    if (!isMatch) return res.status(400).json({ msg: \"Invalid credentials\" });\r\n\r\n    const token = jwt.sign(\r\n      { admin: { email: admin.email, _id: admin._id } },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: \"1h\" }\r\n    );\r\n\r\n    return res.status(200).json({ token });\r\n  } catch (err) {\r\n    console.error(err);\r\n    return res.status(500).send(\"Server error\");\r\n  }\r\n}\r\n"
        }
    ]
}