{
    "sourceFile": "api/reminder.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1757269391263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757270851006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n // /api/reminder.js\r\n-import { connectDB, Event } from \"../lib/db.js\";\r\n+import connectDB, { Event } from \"../lib/db.js\";\r\n import nodemailer from \"nodemailer\";\r\n \r\n export default async function handler(req, res) {\r\n   if (req.method !== \"POST\") return res.status(405).json({ msg: \"Method not allowed\" });\r\n"
                },
                {
                    "date": 1757271049400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,34 @@\n // /api/reminder.js\r\n import connectDB, { Event } from \"../lib/db.js\";\r\n+import jwt from \"jsonwebtoken\";\r\n import nodemailer from \"nodemailer\";\r\n \r\n export default async function handler(req, res) {\r\n-  if (req.method !== \"POST\") return res.status(405).json({ msg: \"Method not allowed\" });\r\n+  // Only allow GET for testing\r\n+  if (req.method !== \"GET\") {\r\n+    return res.status(405).json({ msg: \"Method not allowed\" });\r\n+  }\r\n \r\n+  // Check Authorization header\r\n+  const authHeader = req.headers.authorization;\r\n+  if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\r\n+    return res.status(401).json({ msg: \"No token, auth denied\" });\r\n+  }\r\n+\r\n+  const token = authHeader.split(\" \")[1];\r\n+  let adminEmail;\r\n+  try {\r\n+    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+    adminEmail = decoded.admin.email;\r\n+  } catch (err) {\r\n+    return res.status(401).json({ msg: \"Token is not valid\" });\r\n+  }\r\n+\r\n+  // Connect to DB\r\n   await connectDB();\r\n \r\n   const now = new Date();\r\n   const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n \r\n-  const events = await Event.find({\r\n-    status: \"CONFIRMED\",\r\n-    date: { $lte: fiveMinutesLater, $gte: now },\r\n-  });\r\n-\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: \"gmail\",\r\n-    auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n-  });\r\n-\r\n-  for (const event of events) {\r\n-    await transporter.sendMail({\r\n-      from: process.env.ADMIN_EMAIL,\r\n-      to: event.createdBy,\r\n-      subject: `Reminder: \"${event.title}\" event in 5 minutes`,\r\n-      text: `Your event \"${event.title}\" is scheduled at ${event.date}`,\r\n-    });\r\n-  }\r\n-\r\n-  return res.json({ sent: events.length });\r\n-}\r\n+  // Get events for this admin in next 5 minutes\r\n+  const events = await E\r\n"
                },
                {
                    "date": 1757271057922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,5 +30,32 @@\n   const now = new Date();\r\n   const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n \r\n   // Get events for this admin in next 5 minutes\r\n-  const events = await E\r\n+  const events = await Event.find({\r\n+    status: \"CONFIRMED\",\r\n+    createdBy: adminEmail,\r\n+    date: { $lte: fiveMinutesLater, $gte: now },\r\n+  });\r\n+\r\n+  if (events.length === 0) {\r\n+    return res.json({ sent: 0 });\r\n+  }\r\n+\r\n+  // Setup nodemailer\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: \"gmail\",\r\n+    auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n+  });\r\n+\r\n+  // Send emails\r\n+  for (const event of events) {\r\n+    await transporter.sendMail({\r\n+      from: process.env.ADMIN_EMAIL,\r\n+      to: event.createdBy,\r\n+      subject: `Reminder: \"${event.title}\" event in 5 minutes`,\r\n+      text: `Your event \"${event.title}\" is scheduled at ${event.date}`,\r\n+    });\r\n+  }\r\n+\r\n+  return res.json({ sent: events.length });\r\n+}\r\n"
                },
                {
                    "date": 1757271676762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,61 +1,71 @@\n // /api/reminder.js\r\n import connectDB, { Event } from \"../lib/db.js\";\r\n-import jwt from \"jsonwebtoken\";\r\n+import Job from \"../models/job.js\";\r\n import nodemailer from \"nodemailer\";\r\n \r\n-export default async function handler(req, res) {\r\n-  // Only allow GET for testing\r\n-  if (req.method !== \"GET\") {\r\n-    return res.status(405).json({ msg: \"Method not allowed\" });\r\n-  }\r\n+const transporter = nodemailer.createTransport({\r\n+  service: \"gmail\",\r\n+  auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n+});\r\n \r\n-  // Check Authorization header\r\n-  const authHeader = req.headers.authorization;\r\n-  if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\r\n-    return res.status(401).json({ msg: \"No token, auth denied\" });\r\n-  }\r\n+async function sendEmail(to, title, date) {\r\n+  return transporter.sendMail({\r\n+    from: process.env.ADMIN_EMAIL,\r\n+    to,\r\n+    subject: `Reminder: \"${title}\" event in 5 minutes`,\r\n+    text: `Hello,\\n\\nThis is a reminder for your event: \"${title}\" scheduled at ${date}.\\n\\n- Event Dashboard`,\r\n+  });\r\n+}\r\n \r\n-  const token = authHeader.split(\" \")[1];\r\n-  let adminEmail;\r\n-  try {\r\n-    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-    adminEmail = decoded.admin.email;\r\n-  } catch (err) {\r\n-    return res.status(401).json({ msg: \"Token is not valid\" });\r\n-  }\r\n+export default async function handler(req, res) {\r\n+  if (req.method !== \"GET\") return res.status(405).json({ msg: \"Method not allowed\" });\r\n \r\n-  // Connect to DB\r\n   await connectDB();\r\n \r\n   const now = new Date();\r\n   const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n \r\n-  // Get events for this admin in next 5 minutes\r\n   const events = await Event.find({\r\n-    status: \"CONFIRMED\",\r\n-    createdBy: adminEmail,\r\n     date: { $lte: fiveMinutesLater, $gte: now },\r\n   });\r\n \r\n-  if (events.length === 0) {\r\n-    return res.json({ sent: 0 });\r\n-  }\r\n+  let processed = 0;\r\n \r\n-  // Setup nodemailer\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: \"gmail\",\r\n-    auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n-  });\r\n-\r\n-  // Send emails\r\n   for (const event of events) {\r\n-    await transporter.sendMail({\r\n-      from: process.env.ADMIN_EMAIL,\r\n-      to: event.createdBy,\r\n-      subject: `Reminder: \"${event.title}\" event in 5 minutes`,\r\n-      text: `Your event \"${event.title}\" is scheduled at ${event.date}`,\r\n-    });\r\n+    try {\r\n+      if (event.status === \"CONFIRMED\") {\r\n+        // Send reminder email\r\n+        await sendEmail(event.createdBy, event.title, event.date);\r\n+        // Create Job with SENT\r\n+        await Job.create({\r\n+          eventId: event._id,\r\n+          createdOn: new Date().toISOString(),\r\n+          sentTo: event.createdBy,\r\n+          status: \"SENT\",\r\n+        });\r\n+      } else if (event.status === \"DELETED\" || event.status === \"CANCELLED\") {\r\n+        // Create Job with FAILED\r\n+        await Job.create({\r\n+          eventId: event._id,\r\n+          createdOn: new Date().toISOString(),\r\n+          sentTo: event.createdBy,\r\n+          status: \"FAILED\",\r\n+          motifFailure: event.status,\r\n+        });\r\n+      }\r\n+      processed++;\r\n+    } catch (err) {\r\n+      console.error(`Failed to process event ${event._id}:`, err);\r\n+      // Create Job with FAILED for any errors\r\n+      await Job.create({\r\n+        eventId: event._id,\r\n+        createdOn: new Date().toISOString(),\r\n+        sentTo: event.createdBy,\r\n+        status: \"FAILED\",\r\n+        motifFailure: err.message,\r\n+      });\r\n+    }\r\n   }\r\n \r\n-  return res.json({ sent: events.length });\r\n+  return res.json({ processed });\r\n }\r\n"
                },
                {
                    "date": 1757273211933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \r\n   await connectDB();\r\n \r\n   const now = new Date();\r\n-  const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n+  //const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n \r\n   const events = await Event.find({\r\n     date: { $lte: fiveMinutesLater, $gte: now },\r\n   });\r\n"
                },
                {
                    "date": 1757273218555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+// /api/reminder.js\r\n+import connectDB, { Event } from \"../lib/db.js\";\r\n+import Job from \"../models/job.js\";\r\n+import nodemailer from \"nodemailer\";\r\n+\r\n+const transporter = nodemailer.createTransport({\r\n+  service: \"gmail\",\r\n+  auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n+});\r\n+\r\n+async function sendEmail(to, title, date) {\r\n+  return transporter.sendMail({\r\n+    from: process.env.ADMIN_EMAIL,\r\n+    to,\r\n+    subject: `Reminder: \"${title}\" event in 5 minutes`,\r\n+    text: `Hello,\\n\\nThis is a reminder for your event: \"${title}\" scheduled at ${date}.\\n\\n- Event Dashboard`,\r\n+  });\r\n+}\r\n+\r\n+export default async function handler(req, res) {\r\n+  if (req.method !== \"GET\") return res.status(405).json({ msg: \"Method not allowed\" });\r\n+\r\n+  await connectDB();\r\n+\r\n+  const now = new Date();\r\n+  //const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n+  const fiveMinutesLater = new Date(now.getTime() + 2 * 60000);\r\n+\r\n+  const events = await Event.find({\r\n+    date: { $lte: fiveMinutesLater, $gte: now },\r\n+  });\r\n+\r\n+  let processed = 0;\r\n+\r\n+  for (const event of events) {\r\n+    try {\r\n+      if (event.status === \"CONFIRMED\") {\r\n+        // Send reminder email\r\n+        await sendEmail(event.createdBy, event.title, event.date);\r\n+        // Create Job with SENT\r\n+        await Job.create({\r\n+          eventId: event._id,\r\n+          createdOn: new Date().toISOString(),\r\n+          sentTo: event.createdBy,\r\n+          status: \"SENT\",\r\n+        });\r\n+      } else if (event.status === \"DELETED\" || event.status === \"CANCELLED\") {\r\n+        // Create Job with FAILED\r\n+        await Job.create({\r\n+          eventId: event._id,\r\n+          createdOn: new Date().toISOString(),\r\n+          sentTo: event.createdBy,\r\n+          status: \"FAILED\",\r\n+          motifFailure: event.status,\r\n+        });\r\n+      }\r\n+      processed++;\r\n+    } catch (err) {\r\n+      console.error(`Failed to process event ${event._id}:`, err);\r\n+      // Create Job with FAILED for any errors\r\n+      await Job.create({\r\n+        eventId: event._id,\r\n+        createdOn: new Date().toISOString(),\r\n+        sentTo: event.createdBy,\r\n+        status: \"FAILED\",\r\n+        motifFailure: err.message,\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  return res.json({ processed });\r\n+}\r\n"
                },
                {
                    "date": 1757273843596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,41 +12,41 @@\n   return transporter.sendMail({\r\n     from: process.env.ADMIN_EMAIL,\r\n     to,\r\n     subject: `Reminder: \"${title}\" event in 5 minutes`,\r\n-    text: `Hello,\\n\\nThis is a reminder for your event: \"${title}\" scheduled at ${date}.\\n\\n- Event Dashboard`,\r\n+    text: `Hello,\\n\\nThis is a reminder for your event: \"${title}\" scheduled at ${new Date(\r\n+      date\r\n+    ).toLocaleString()}.\\n\\n- Event Dashboard`,\r\n   });\r\n }\r\n \r\n export default async function handler(req, res) {\r\n-  if (req.method !== \"GET\") return res.status(405).json({ msg: \"Method not allowed\" });\r\n+  if (req.method !== \"GET\")\r\n+    return res.status(405).json({ msg: \"Method not allowed\" });\r\n \r\n   await connectDB();\r\n \r\n   const now = new Date();\r\n-  //const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n-  const fiveMinutesLater = new Date(now.getTime() + 2 * 60000);\r\n+  const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n \r\n+  // Fetch events within next 5 minutes\r\n   const events = await Event.find({\r\n-    date: { $lte: fiveMinutesLater, $gte: now },\r\n+    date: { $gte: now, $lte: fiveMinutesLater },\r\n   });\r\n \r\n   let processed = 0;\r\n \r\n   for (const event of events) {\r\n     try {\r\n       if (event.status === \"CONFIRMED\") {\r\n-        // Send reminder email\r\n         await sendEmail(event.createdBy, event.title, event.date);\r\n-        // Create Job with SENT\r\n         await Job.create({\r\n           eventId: event._id,\r\n           createdOn: new Date().toISOString(),\r\n           sentTo: event.createdBy,\r\n           status: \"SENT\",\r\n         });\r\n       } else if (event.status === \"DELETED\" || event.status === \"CANCELLED\") {\r\n-        // Create Job with FAILED\r\n         await Job.create({\r\n           eventId: event._id,\r\n           createdOn: new Date().toISOString(),\r\n           sentTo: event.createdBy,\r\n@@ -55,10 +55,9 @@\n         });\r\n       }\r\n       processed++;\r\n     } catch (err) {\r\n-      console.error(`Failed to process event ${event._id}:`, err);\r\n-      // Create Job with FAILED for any errors\r\n+      console.error(`Failed event ${event._id}:`, err);\r\n       await Job.create({\r\n         eventId: event._id,\r\n         createdOn: new Date().toISOString(),\r\n         sentTo: event.createdBy,\r\n@@ -69,75 +68,4 @@\n   }\r\n \r\n   return res.json({ processed });\r\n }\r\n-// /api/reminder.js\r\n-import connectDB, { Event } from \"../lib/db.js\";\r\n-import Job from \"../models/job.js\";\r\n-import nodemailer from \"nodemailer\";\r\n-\r\n-const transporter = nodemailer.createTransport({\r\n-  service: \"gmail\",\r\n-  auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n-});\r\n-\r\n-async function sendEmail(to, title, date) {\r\n-  return transporter.sendMail({\r\n-    from: process.env.ADMIN_EMAIL,\r\n-    to,\r\n-    subject: `Reminder: \"${title}\" event in 5 minutes`,\r\n-    text: `Hello,\\n\\nThis is a reminder for your event: \"${title}\" scheduled at ${date}.\\n\\n- Event Dashboard`,\r\n-  });\r\n-}\r\n-\r\n-export default async function handler(req, res) {\r\n-  if (req.method !== \"GET\") return res.status(405).json({ msg: \"Method not allowed\" });\r\n-\r\n-  await connectDB();\r\n-\r\n-  const now = new Date();\r\n-  //const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n-\r\n-  const events = await Event.find({\r\n-    date: { $lte: fiveMinutesLater, $gte: now },\r\n-  });\r\n-\r\n-  let processed = 0;\r\n-\r\n-  for (const event of events) {\r\n-    try {\r\n-      if (event.status === \"CONFIRMED\") {\r\n-        // Send reminder email\r\n-        await sendEmail(event.createdBy, event.title, event.date);\r\n-        // Create Job with SENT\r\n-        await Job.create({\r\n-          eventId: event._id,\r\n-          createdOn: new Date().toISOString(),\r\n-          sentTo: event.createdBy,\r\n-          status: \"SENT\",\r\n-        });\r\n-      } else if (event.status === \"DELETED\" || event.status === \"CANCELLED\") {\r\n-        // Create Job with FAILED\r\n-        await Job.create({\r\n-          eventId: event._id,\r\n-          createdOn: new Date().toISOString(),\r\n-          sentTo: event.createdBy,\r\n-          status: \"FAILED\",\r\n-          motifFailure: event.status,\r\n-        });\r\n-      }\r\n-      processed++;\r\n-    } catch (err) {\r\n-      console.error(`Failed to process event ${event._id}:`, err);\r\n-      // Create Job with FAILED for any errors\r\n-      await Job.create({\r\n-        eventId: event._id,\r\n-        createdOn: new Date().toISOString(),\r\n-        sentTo: event.createdBy,\r\n-        status: \"FAILED\",\r\n-        motifFailure: err.message,\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  return res.json({ processed });\r\n-}\r\n"
                },
                {
                    "date": 1757274299639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,15 +24,15 @@\n     return res.status(405).json({ msg: \"Method not allowed\" });\r\n \r\n   await connectDB();\r\n \r\n-  const now = new Date();\r\n-  const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n+  const now = new Date(); // in local time\r\n+const nowUTC = new Date(now.toISOString()); // convert to UTC\r\n+const fiveMinutesLaterUTC = new Date(nowUTC.getTime() + 5 * 60000);\r\n \r\n-  // Fetch events within next 5 minutes\r\n-  const events = await Event.find({\r\n-    date: { $gte: now, $lte: fiveMinutesLater },\r\n-  });\r\n+const events = await Event.find({\r\n+  date: { $gte: nowUTC, $lte: fiveMinutesLaterUTC },\r\n+});\r\n \r\n   let processed = 0;\r\n \r\n   for (const event of events) {\r\n"
                },
                {
                    "date": 1757274608372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,14 +24,14 @@\n     return res.status(405).json({ msg: \"Method not allowed\" });\r\n \r\n   await connectDB();\r\n \r\n-  const now = new Date(); // in local time\r\n-const nowUTC = new Date(now.toISOString()); // convert to UTC\r\n-const fiveMinutesLaterUTC = new Date(nowUTC.getTime() + 5 * 60000);\r\n+ const now = new Date();\r\n+const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n \r\n const events = await Event.find({\r\n-  date: { $gte: nowUTC, $lte: fiveMinutesLaterUTC },\r\n+  date: { $gte: now, $lte: fiveMinutesLater },\r\n+  status: \"CONFIRMED\",\r\n });\r\n \r\n   let processed = 0;\r\n \r\n"
                },
                {
                    "date": 1757274619014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n \r\n const events = await Event.find({\r\n   date: { $gte: now, $lte: fiveMinutesLater },\r\n-  status: \"CONFIRMED\",\r\n+  ,\r\n });\r\n \r\n   let processed = 0;\r\n \r\n"
                },
                {
                    "date": 1757274626024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+// /api/reminder.js\r\n+import connectDB, { Event } from \"../lib/db.js\";\r\n+import Job from \"../models/job.js\";\r\n+import nodemailer from \"nodemailer\";\r\n+\r\n+const transporter = nodemailer.createTransport({\r\n+  service: \"gmail\",\r\n+  auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n+});\r\n+\r\n+async function sendEmail(to, title, date) {\r\n+  return transporter.sendMail({\r\n+    from: process.env.ADMIN_EMAIL,\r\n+    to,\r\n+    subject: `Reminder: \"${title}\" event in 5 minutes`,\r\n+    text: `Hello,\\n\\nThis is a reminder for your event: \"${title}\" scheduled at ${new Date(\r\n+      date\r\n+    ).toLocaleString()}.\\n\\n- Event Dashboard`,\r\n+  });\r\n+}\r\n+\r\n+export default async function handler(req, res) {\r\n+  if (req.method !== \"GET\")\r\n+    return res.status(405).json({ msg: \"Method not allowed\" });\r\n+\r\n+  await connectDB();\r\n+\r\n+ const now = new Date();\r\n+const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n+\r\n+const events = await Event.find({\r\n+  date: { $gte: now, $lte: fiveMinutesLater }\r\n+});\r\n+\r\n+  let processed = 0;\r\n+\r\n+  for (const event of events) {\r\n+    try {\r\n+      if (event.status === \"CONFIRMED\") {\r\n+        await sendEmail(event.createdBy, event.title, event.date);\r\n+        await Job.create({\r\n+          eventId: event._id,\r\n+          createdOn: new Date().toISOString(),\r\n+          sentTo: event.createdBy,\r\n+          status: \"SENT\",\r\n+        });\r\n+      } else if (event.status === \"DELETED\" || event.status === \"CANCELLED\") {\r\n+        await Job.create({\r\n+          eventId: event._id,\r\n+          createdOn: new Date().toISOString(),\r\n+          sentTo: event.createdBy,\r\n+          status: \"FAILED\",\r\n+          motifFailure: event.status,\r\n+        });\r\n+      }\r\n+      processed++;\r\n+    } catch (err) {\r\n+      console.error(`Failed event ${event._id}:`, err);\r\n+      await Job.create({\r\n+        eventId: event._id,\r\n+        createdOn: new Date().toISOString(),\r\n+        sentTo: event.createdBy,\r\n+        status: \"FAILED\",\r\n+        motifFailure: err.message,\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  return res.json({ processed });\r\n+}\r\n"
                },
                {
                    "date": 1757274917798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,81 +27,15 @@\n \r\n  const now = new Date();\r\n const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n \r\n-const events = await Event.find({\r\n-  date: { $gte: now, $lte: fiveMinutesLater }\r\n-});\r\n+// Convert to UTC for MongoDB query\r\n+const nowUTC = new Date(now.toISOString());\r\n+const fiveMinutesLaterUTC = new Date(fiveMinutesLater.toISOString());\r\n \r\n-  let processed = 0;\r\n-\r\n-  for (const event of events) {\r\n-    try {\r\n-      if (event.status === \"CONFIRMED\") {\r\n-        await sendEmail(event.createdBy, event.title, event.date);\r\n-        await Job.create({\r\n-          eventId: event._id,\r\n-          createdOn: new Date().toISOString(),\r\n-          sentTo: event.createdBy,\r\n-          status: \"SENT\",\r\n-        });\r\n-      } else if (event.status === \"DELETED\" || event.status === \"CANCELLED\") {\r\n-        await Job.create({\r\n-          eventId: event._id,\r\n-          createdOn: new Date().toISOString(),\r\n-          sentTo: event.createdBy,\r\n-          status: \"FAILED\",\r\n-          motifFailure: event.status,\r\n-        });\r\n-      }\r\n-      processed++;\r\n-    } catch (err) {\r\n-      console.error(`Failed event ${event._id}:`, err);\r\n-      await Job.create({\r\n-        eventId: event._id,\r\n-        createdOn: new Date().toISOString(),\r\n-        sentTo: event.createdBy,\r\n-        status: \"FAILED\",\r\n-        motifFailure: err.message,\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  return res.json({ processed });\r\n-}\r\n-// /api/reminder.js\r\n-import connectDB, { Event } from \"../lib/db.js\";\r\n-import Job from \"../models/job.js\";\r\n-import nodemailer from \"nodemailer\";\r\n-\r\n-const transporter = nodemailer.createTransport({\r\n-  service: \"gmail\",\r\n-  auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n-});\r\n-\r\n-async function sendEmail(to, title, date) {\r\n-  return transporter.sendMail({\r\n-    from: process.env.ADMIN_EMAIL,\r\n-    to,\r\n-    subject: `Reminder: \"${title}\" event in 5 minutes`,\r\n-    text: `Hello,\\n\\nThis is a reminder for your event: \"${title}\" scheduled at ${new Date(\r\n-      date\r\n-    ).toLocaleString()}.\\n\\n- Event Dashboard`,\r\n-  });\r\n-}\r\n-\r\n-export default async function handler(req, res) {\r\n-  if (req.method !== \"GET\")\r\n-    return res.status(405).json({ msg: \"Method not allowed\" });\r\n-\r\n-  await connectDB();\r\n-\r\n- const now = new Date();\r\n-const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n-\r\n const events = await Event.find({\r\n-  date: { $gte: now, $lte: fiveMinutesLater },\r\n-  ,\r\n+  date: { $gte: nowUTC, $lte: fiveMinutesLaterUTC },\r\n+  status: \"CONFIRMED\",\r\n });\r\n \r\n   let processed = 0;\r\n \r\n"
                },
                {
                    "date": 1757274923823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+// /api/reminder.js\r\n+import connectDB, { Event } from \"../lib/db.js\";\r\n+import Job from \"../models/job.js\";\r\n+import nodemailer from \"nodemailer\";\r\n+\r\n+const transporter = nodemailer.createTransport({\r\n+  service: \"gmail\",\r\n+  auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n+});\r\n+\r\n+async function sendEmail(to, title, date) {\r\n+  return transporter.sendMail({\r\n+    from: process.env.ADMIN_EMAIL,\r\n+    to,\r\n+    subject: `Reminder: \"${title}\" event in 5 minutes`,\r\n+    text: `Hello,\\n\\nThis is a reminder for your event: \"${title}\" scheduled at ${new Date(\r\n+      date\r\n+    ).toLocaleString()}.\\n\\n- Event Dashboard`,\r\n+  });\r\n+}\r\n+\r\n+export default async function handler(req, res) {\r\n+  if (req.method !== \"GET\")\r\n+    return res.status(405).json({ msg: \"Method not allowed\" });\r\n+\r\n+  await connectDB();\r\n+\r\n+ const now = new Date();\r\n+const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n+\r\n+// Convert to UTC for MongoDB query\r\n+const nowUTC = new Date(now.toISOString());\r\n+const fiveMinutesLaterUTC = new Date(fiveMinutesLater.toISOString());\r\n+\r\n+const events = await Event.find({\r\n+  date: { $gte: nowUTC, $lte: fiveMinutesLaterUTC }\r\n+});\r\n+\r\n+  let processed = 0;\r\n+\r\n+  for (const event of events) {\r\n+    try {\r\n+      if (event.status === \"CONFIRMED\") {\r\n+        await sendEmail(event.createdBy, event.title, event.date);\r\n+        await Job.create({\r\n+          eventId: event._id,\r\n+          createdOn: new Date().toISOString(),\r\n+          sentTo: event.createdBy,\r\n+          status: \"SENT\",\r\n+        });\r\n+      } else if (event.status === \"DELETED\" || event.status === \"CANCELLED\") {\r\n+        await Job.create({\r\n+          eventId: event._id,\r\n+          createdOn: new Date().toISOString(),\r\n+          sentTo: event.createdBy,\r\n+          status: \"FAILED\",\r\n+          motifFailure: event.status,\r\n+        });\r\n+      }\r\n+      processed++;\r\n+    } catch (err) {\r\n+      console.error(`Failed event ${event._id}:`, err);\r\n+      await Job.create({\r\n+        eventId: event._id,\r\n+        createdOn: new Date().toISOString(),\r\n+        sentTo: event.createdBy,\r\n+        status: \"FAILED\",\r\n+        motifFailure: err.message,\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  return res.json({ processed });\r\n+}\r\n"
                },
                {
                    "date": 1757276992331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// /api/reminder.js\r\n+/* // /api/reminder.js\r\n import connectDB, { Event } from \"../lib/db.js\";\r\n import Job from \"../models/job.js\";\r\n import nodemailer from \"nodemailer\";\r\n \r\n@@ -71,79 +71,5 @@\n   }\r\n \r\n   return res.json({ processed });\r\n }\r\n-// /api/reminder.js\r\n-import connectDB, { Event } from \"../lib/db.js\";\r\n-import Job from \"../models/job.js\";\r\n-import nodemailer from \"nodemailer\";\r\n-\r\n-const transporter = nodemailer.createTransport({\r\n-  service: \"gmail\",\r\n-  auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n-});\r\n-\r\n-async function sendEmail(to, title, date) {\r\n-  return transporter.sendMail({\r\n-    from: process.env.ADMIN_EMAIL,\r\n-    to,\r\n-    subject: `Reminder: \"${title}\" event in 5 minutes`,\r\n-    text: `Hello,\\n\\nThis is a reminder for your event: \"${title}\" scheduled at ${new Date(\r\n-      date\r\n-    ).toLocaleString()}.\\n\\n- Event Dashboard`,\r\n-  });\r\n-}\r\n-\r\n-export default async function handler(req, res) {\r\n-  if (req.method !== \"GET\")\r\n-    return res.status(405).json({ msg: \"Method not allowed\" });\r\n-\r\n-  await connectDB();\r\n-\r\n- const now = new Date();\r\n-const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n-\r\n-// Convert to UTC for MongoDB query\r\n-const nowUTC = new Date(now.toISOString());\r\n-const fiveMinutesLaterUTC = new Date(fiveMinutesLater.toISOString());\r\n-\r\n-const events = await Event.find({\r\n-  date: { $gte: nowUTC, $lte: fiveMinutesLaterUTC },\r\n-  status: \"CONFIRMED\",\r\n-});\r\n-\r\n-  let processed = 0;\r\n-\r\n-  for (const event of events) {\r\n-    try {\r\n-      if (event.status === \"CONFIRMED\") {\r\n-        await sendEmail(event.createdBy, event.title, event.date);\r\n-        await Job.create({\r\n-          eventId: event._id,\r\n-          createdOn: new Date().toISOString(),\r\n-          sentTo: event.createdBy,\r\n-          status: \"SENT\",\r\n-        });\r\n-      } else if (event.status === \"DELETED\" || event.status === \"CANCELLED\") {\r\n-        await Job.create({\r\n-          eventId: event._id,\r\n-          createdOn: new Date().toISOString(),\r\n-          sentTo: event.createdBy,\r\n-          status: \"FAILED\",\r\n-          motifFailure: event.status,\r\n-        });\r\n-      }\r\n-      processed++;\r\n-    } catch (err) {\r\n-      console.error(`Failed event ${event._id}:`, err);\r\n-      await Job.create({\r\n-        eventId: event._id,\r\n-        createdOn: new Date().toISOString(),\r\n-        sentTo: event.createdBy,\r\n-        status: \"FAILED\",\r\n-        motifFailure: err.message,\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  return res.json({ processed });\r\n-}\r\n+ */\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757277241463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+/* // /api/reminder.js\r\n+import connectDB, { Event } from \"../lib/db.js\";\r\n+import Job from \"../models/job.js\";\r\n+import nodemailer from \"nodemailer\";\r\n+\r\n+const transporter = nodemailer.createTransport({\r\n+  service: \"gmail\",\r\n+  auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n+});\r\n+\r\n+async function sendEmail(to, title, date) {\r\n+  return transporter.sendMail({\r\n+    from: process.env.ADMIN_EMAIL,\r\n+    to,\r\n+    subject: `Reminder: \"${title}\" event in 5 minutes`,\r\n+    text: `Hello,\\n\\nThis is a reminder for your event: \"${title}\" scheduled at ${new Date(\r\n+      date\r\n+    ).toLocaleString()}.\\n\\n- Event Dashboard`,\r\n+  });\r\n+}\r\n+\r\n+export default async function handler(req, res) {\r\n+  if (req.method !== \"GET\")\r\n+    return res.status(405).json({ msg: \"Method not allowed\" });\r\n+\r\n+  await connectDB();\r\n+\r\n+ const now = new Date();\r\n+const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n+\r\n+// Convert to UTC for MongoDB query\r\n+const nowUTC = new Date(now.toISOString());\r\n+const fiveMinutesLaterUTC = new Date(fiveMinutesLater.toISOString());\r\n+\r\n+const events = await Event.find({\r\n+  date: { $gte: nowUTC, $lte: fiveMinutesLaterUTC }\r\n+});\r\n+\r\n+  let processed = 0;\r\n+\r\n+  for (const event of events) {\r\n+    try {\r\n+      if (event.status === \"CONFIRMED\") {\r\n+        await sendEmail(event.createdBy, event.title, event.date);\r\n+        await Job.create({\r\n+          eventId: event._id,\r\n+          createdOn: new Date().toISOString(),\r\n+          sentTo: event.createdBy,\r\n+          status: \"SENT\",\r\n+        });\r\n+      } else if (event.status === \"DELETED\" || event.status === \"CANCELLED\") {\r\n+        await Job.create({\r\n+          eventId: event._id,\r\n+          createdOn: new Date().toISOString(),\r\n+          sentTo: event.createdBy,\r\n+          status: \"FAILED\",\r\n+          motifFailure: event.status,\r\n+        });\r\n+      }\r\n+      processed++;\r\n+    } catch (err) {\r\n+      console.error(`Failed event ${event._id}:`, err);\r\n+      await Job.create({\r\n+        eventId: event._id,\r\n+        createdOn: new Date().toISOString(),\r\n+        sentTo: event.createdBy,\r\n+        status: \"FAILED\",\r\n+        motifFailure: err.message,\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  return res.json({ processed });\r\n+}\r\n+ */\r\n"
                },
                {
                    "date": 1757277255739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-/* // /api/reminder.js\r\n+// /api/reminder.js\r\n import connectDB, { Event } from \"../lib/db.js\";\r\n import Job from \"../models/job.js\";\r\n import nodemailer from \"nodemailer\";\r\n \r\n@@ -71,80 +71,4 @@\n   }\r\n \r\n   return res.json({ processed });\r\n }\r\n- */\r\n-/* // /api/reminder.js\r\n-import connectDB, { Event } from \"../lib/db.js\";\r\n-import Job from \"../models/job.js\";\r\n-import nodemailer from \"nodemailer\";\r\n-\r\n-const transporter = nodemailer.createTransport({\r\n-  service: \"gmail\",\r\n-  auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n-});\r\n-\r\n-async function sendEmail(to, title, date) {\r\n-  return transporter.sendMail({\r\n-    from: process.env.ADMIN_EMAIL,\r\n-    to,\r\n-    subject: `Reminder: \"${title}\" event in 5 minutes`,\r\n-    text: `Hello,\\n\\nThis is a reminder for your event: \"${title}\" scheduled at ${new Date(\r\n-      date\r\n-    ).toLocaleString()}.\\n\\n- Event Dashboard`,\r\n-  });\r\n-}\r\n-\r\n-export default async function handler(req, res) {\r\n-  if (req.method !== \"GET\")\r\n-    return res.status(405).json({ msg: \"Method not allowed\" });\r\n-\r\n-  await connectDB();\r\n-\r\n- const now = new Date();\r\n-const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n-\r\n-// Convert to UTC for MongoDB query\r\n-const nowUTC = new Date(now.toISOString());\r\n-const fiveMinutesLaterUTC = new Date(fiveMinutesLater.toISOString());\r\n-\r\n-const events = await Event.find({\r\n-  date: { $gte: nowUTC, $lte: fiveMinutesLaterUTC }\r\n-});\r\n-\r\n-  let processed = 0;\r\n-\r\n-  for (const event of events) {\r\n-    try {\r\n-      if (event.status === \"CONFIRMED\") {\r\n-        await sendEmail(event.createdBy, event.title, event.date);\r\n-        await Job.create({\r\n-          eventId: event._id,\r\n-          createdOn: new Date().toISOString(),\r\n-          sentTo: event.createdBy,\r\n-          status: \"SENT\",\r\n-        });\r\n-      } else if (event.status === \"DELETED\" || event.status === \"CANCELLED\") {\r\n-        await Job.create({\r\n-          eventId: event._id,\r\n-          createdOn: new Date().toISOString(),\r\n-          sentTo: event.createdBy,\r\n-          status: \"FAILED\",\r\n-          motifFailure: event.status,\r\n-        });\r\n-      }\r\n-      processed++;\r\n-    } catch (err) {\r\n-      console.error(`Failed event ${event._id}:`, err);\r\n-      await Job.create({\r\n-        eventId: event._id,\r\n-        createdOn: new Date().toISOString(),\r\n-        sentTo: event.createdBy,\r\n-        status: \"FAILED\",\r\n-        motifFailure: err.message,\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  return res.json({ processed });\r\n-}\r\n- */\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757440397489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n-// /api/reminder.js\r\n import connectDB, { Event } from \"../lib/db.js\";\r\n import Job from \"../models/job.js\";\r\n import nodemailer from \"nodemailer\";\r\n+import { withAuth } from \"../lib/middleware.js\";\r\n \r\n const transporter = nodemailer.createTransport({\r\n   service: \"gmail\",\r\n   auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n@@ -18,24 +18,25 @@\n     ).toLocaleString()}.\\n\\n- Event Dashboard`,\r\n   });\r\n }\r\n \r\n-export default async function handler(req, res) {\r\n-  if (req.method !== \"GET\")\r\n+async function handler(req, res) {\r\n+  if (req.method !== \"GET\") {\r\n     return res.status(405).json({ msg: \"Method not allowed\" });\r\n+  }\r\n \r\n   await connectDB();\r\n \r\n- const now = new Date();\r\n-const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n+  const now = new Date();\r\n+  const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n \r\n-// Convert to UTC for MongoDB query\r\n-const nowUTC = new Date(now.toISOString());\r\n-const fiveMinutesLaterUTC = new Date(fiveMinutesLater.toISOString());\r\n+  // Convert to UTC for MongoDB query\r\n+  const nowUTC = new Date(now.toISOString());\r\n+  const fiveMinutesLaterUTC = new Date(fiveMinutesLater.toISOString());\r\n \r\n-const events = await Event.find({\r\n-  date: { $gte: nowUTC, $lte: fiveMinutesLaterUTC }\r\n-});\r\n+  const events = await Event.find({\r\n+    date: { $gte: nowUTC, $lte: fiveMinutesLaterUTC },\r\n+  });\r\n \r\n   let processed = 0;\r\n \r\n   for (const event of events) {\r\n@@ -71,4 +72,7 @@\n   }\r\n \r\n   return res.json({ processed });\r\n }\r\n+\r\n+// ✅ Wrap withAuth so CORS + JWT are applied\r\n+export default withAuth(handler);\r\n"
                }
            ],
            "date": 1757269391263,
            "name": "Commit-0",
            "content": "// /api/reminder.js\r\nimport { connectDB, Event } from \"../lib/db.js\";\r\nimport nodemailer from \"nodemailer\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") return res.status(405).json({ msg: \"Method not allowed\" });\r\n\r\n  await connectDB();\r\n\r\n  const now = new Date();\r\n  const fiveMinutesLater = new Date(now.getTime() + 5 * 60000);\r\n\r\n  const events = await Event.find({\r\n    status: \"CONFIRMED\",\r\n    date: { $lte: fiveMinutesLater, $gte: now },\r\n  });\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: { user: process.env.ADMIN_EMAIL, pass: process.env.ADMIN_PASS },\r\n  });\r\n\r\n  for (const event of events) {\r\n    await transporter.sendMail({\r\n      from: process.env.ADMIN_EMAIL,\r\n      to: event.createdBy,\r\n      subject: `Reminder: \"${event.title}\" event in 5 minutes`,\r\n      text: `Your event \"${event.title}\" is scheduled at ${event.date}`,\r\n    });\r\n  }\r\n\r\n  return res.json({ sent: events.length });\r\n}\r\n"
        }
    ]
}