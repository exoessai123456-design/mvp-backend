{
    "sourceFile": "api/events/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1757263491901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757263909947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n import { connectDB, Event } from '../../../lib/db';\r\n-import { scheduleEventReminder } from '../../../lib/reminderScheduler';\r\n import middleware from '../../../lib/middleware';\r\n \r\n connectDB();\r\n \r\n export default async function handler(req, res) {\r\n-  const reqWithAdmin = await middleware(req, res); // attach req.admin\r\n-  if (!reqWithAdmin) return; // middleware handles response if not authorized\r\n+  const reqWithAdmin = await middleware(req, res);\r\n+  if (!reqWithAdmin) return;\r\n \r\n   const adminEmail = reqWithAdmin.admin.email;\r\n \r\n   if (req.method === \"GET\") {\r\n@@ -17,9 +16,8 @@\n \r\n   if (req.method === \"POST\") {\r\n     const newEvent = new Event({ ...req.body, createdBy: adminEmail });\r\n     const savedEvent = await newEvent.save();\r\n-    scheduleEventReminder(savedEvent);\r\n     return res.status(201).json(savedEvent);\r\n   }\r\n \r\n   return res.status(405).json({ message: \"Method not allowed\" });\r\n"
                },
                {
                    "date": 1757264110108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+import { connectDB, Event } from '../../lib/db.js';\r\n+import middleware from '../../lib/middleware.js';\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+  const reqWithAdmin = await middleware(req, res);\r\n+  if (!reqWithAdmin) return;\r\n+\r\n+  const adminEmail = reqWithAdmin.admin.email;\r\n+\r\n+  if (req.method === \"GET\") {\r\n+    const events = await Event.find({ createdBy: adminEmail, status: { $ne: 'DELETED' } });\r\n+    return res.status(200).json(events);\r\n+  }\r\n+\r\n+  if (req.method === \"POST\") {\r\n+    const newEvent = new Event({ ...req.body, createdBy: adminEmail });\r\n+    const savedEvent = await newEvent.save();\r\n+    return res.status(201).json(savedEvent);\r\n+  }\r\n+\r\n+  return res.status(405).json({ message: \"Method not allowed\" });\r\n+}\r\n"
                },
                {
                    "date": 1757265648291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+import connectDB from \"../../lib/db.js\";\r\n+import Event from \"../../models/event.js\"; // adjust path\r\n+import { scheduleEventReminder } from \"../../utils/reminderScheduler.js\";\r\n+import middleware from \"../../middleware/middleware.js\";\r\n+\r\n+export default async function handler(req, res) {\r\n+  await connectDB();\r\n+\r\n+  const admin = await middleware(req, res); // validate JWT\r\n+  if (!admin) return;\r\n+\r\n+  if (req.method === \"GET\") {\r\n+    const events = await Event.find({ createdBy: admin.email, status: { $ne: \"DELETED\" } });\r\n+    return res.json(events);\r\n+  }\r\n+\r\n+  if (req.method === \"POST\") {\r\n+    const newEvent = new Event({ ...req.body, createdBy: admin.email });\r\n+    const savedEvent = await newEvent.save();\r\n+    scheduleEventReminder(savedEvent);\r\n+    return res.status(201).json(savedEvent);\r\n+  }\r\n+\r\n+  res.setHeader(\"Allow\", [\"GET\", \"POST\"]);\r\n+  return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n+}\r\n"
                },
                {
                    "date": 1757266418953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,74 +1,44 @@\n-import connectDB from \"../../lib/db.js\";\r\n-import Event from \"../../models/event.js\"; // adjust path\r\n-import { scheduleEventReminder } from \"../../utils/reminderScheduler.js\";\r\n-import middleware from \"../../middleware/middleware.js\";\r\n+// api/events/index.js\r\n+import { connectDB } from \"../../lib/db.js\";\r\n+import Event from \"../../models/event.js\";\r\n+import { scheduleEventReminder } from \"../../lib/reminderScheduler.js\";\r\n+import middleware from \"../../lib/middleware.js\";\r\n \r\n export default async function handler(req, res) {\r\n   await connectDB();\r\n \r\n-  const admin = await middleware(req, res); // validate JWT\r\n-  if (!admin) return;\r\n+  // Authenticate admin\r\n+  const admin = middleware(req, res);\r\n+  if (!admin) return; // middleware already sent 401\r\n \r\n-  if (req.method === \"GET\") {\r\n-    const events = await Event.find({ createdBy: admin.email, status: { $ne: \"DELETED\" } });\r\n-    return res.json(events);\r\n-  }\r\n+  const { method } = req;\r\n \r\n-  if (req.method === \"POST\") {\r\n-    const newEvent = new Event({ ...req.body, createdBy: admin.email });\r\n-    const savedEvent = await newEvent.save();\r\n-    scheduleEventReminder(savedEvent);\r\n-    return res.status(201).json(savedEvent);\r\n+  if (method === \"GET\") {\r\n+    // GET all events by admin (not deleted)\r\n+    try {\r\n+      const events = await Event.find({\r\n+        createdBy: admin.email,\r\n+        status: { $ne: \"DELETED\" },\r\n+      });\r\n+      return res.status(200).json(events);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      return res.status(500).json({ message: \"Error fetching events\" });\r\n+    }\r\n   }\r\n \r\n-  res.setHeader(\"Allow\", [\"GET\", \"POST\"]);\r\n-  return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n-}\r\n-import { connectDB, Event } from '../../lib/db.js';\r\n-import middleware from '../../lib/middleware.js';\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-  const reqWithAdmin = await middleware(req, res);\r\n-  if (!reqWithAdmin) return;\r\n-\r\n-  const adminEmail = reqWithAdmin.admin.email;\r\n-\r\n-  if (req.method === \"GET\") {\r\n-    const events = await Event.find({ createdBy: adminEmail, status: { $ne: 'DELETED' } });\r\n-    return res.status(200).json(events);\r\n+  if (method === \"POST\") {\r\n+    // Create new event\r\n+    try {\r\n+      const newEvent = new Event({ ...req.body, createdBy: admin.email });\r\n+      const savedEvent = await newEvent.save();\r\n+      await scheduleEventReminder(savedEvent);\r\n+      return res.status(201).json(savedEvent);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      return res.status(500).json({ message: \"Error creating event\" });\r\n+    }\r\n   }\r\n \r\n-  if (req.method === \"POST\") {\r\n-    const newEvent = new Event({ ...req.body, createdBy: adminEmail });\r\n-    const savedEvent = await newEvent.save();\r\n-    return res.status(201).json(savedEvent);\r\n-  }\r\n-\r\n-  return res.status(405).json({ message: \"Method not allowed\" });\r\n+  return res.status(405).json({ message: `Method ${method} not allowed` });\r\n }\r\n-import { connectDB, Event } from '../../../lib/db';\r\n-import middleware from '../../../lib/middleware';\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-  const reqWithAdmin = await middleware(req, res);\r\n-  if (!reqWithAdmin) return;\r\n-\r\n-  const adminEmail = reqWithAdmin.admin.email;\r\n-\r\n-  if (req.method === \"GET\") {\r\n-    const events = await Event.find({ createdBy: adminEmail, status: { $ne: 'DELETED' } });\r\n-    return res.status(200).json(events);\r\n-  }\r\n-\r\n-  if (req.method === \"POST\") {\r\n-    const newEvent = new Event({ ...req.body, createdBy: adminEmail });\r\n-    const savedEvent = await newEvent.save();\r\n-    return res.status(201).json(savedEvent);\r\n-  }\r\n-\r\n-  return res.status(405).json({ message: \"Method not allowed\" });\r\n-}\r\n"
                },
                {
                    "date": 1757266592482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n // api/events/index.js\r\n-import { connectDB } from \"../../lib/db.js\";\r\n+import { connectDB, Event } from \"../../lib/db.js\";\r\n import Event from \"../../models/event.js\";\r\n import { scheduleEventReminder } from \"../../lib/reminderScheduler.js\";\r\n import middleware from \"../../lib/middleware.js\";\r\n \r\n"
                },
                {
                    "date": 1757266923175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,47 @@\n-// api/events/index.js\r\n-import { connectDB, Event } from \"../../lib/db.js\";\r\n+// /api/events/index.js\r\n+import connectDB from \"../../lib/db.js\";\r\n import Event from \"../../models/event.js\";\r\n-import { scheduleEventReminder } from \"../../lib/reminderScheduler.js\";\r\n-import middleware from \"../../lib/middleware.js\";\r\n+import jwt from \"jsonwebtoken\";\r\n \r\n+await connectDB();\r\n+\r\n export default async function handler(req, res) {\r\n-  await connectDB();\r\n+  if (req.method === \"POST\") {\r\n+    const authHeader = req.headers.authorization;\r\n+    if (!authHeader?.startsWith(\"Bearer \")) {\r\n+      return res.status(401).json({ msg: \"No token, auth denied\" });\r\n+    }\r\n \r\n-  // Authenticate admin\r\n-  const admin = middleware(req, res);\r\n-  if (!admin) return; // middleware already sent 401\r\n+    const token = authHeader.split(\" \")[1];\r\n+    let adminEmail;\r\n+    try {\r\n+      const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+      adminEmail = decoded.admin.email;\r\n+    } catch {\r\n+      return res.status(401).json({ msg: \"Token invalid\" });\r\n+    }\r\n \r\n-  const { method } = req;\r\n+    const { title, date, name, phone, type } = req.body;\r\n+    if (!title || !date || !name || !phone || !type) {\r\n+      return res.status(400).json({ msg: \"Missing required fields\" });\r\n+    }\r\n \r\n-  if (method === \"GET\") {\r\n-    // GET all events by admin (not deleted)\r\n     try {\r\n-      const events = await Event.find({\r\n-        createdBy: admin.email,\r\n-        status: { $ne: \"DELETED\" },\r\n+      const event = new Event({\r\n+        title,\r\n+        date,\r\n+        name,\r\n+        phone,\r\n+        type,\r\n+        createdBy: adminEmail,  // ✅ Add admin email here\r\n       });\r\n-      return res.status(200).json(events);\r\n+      await event.save();\r\n+      return res.status(201).json(event);\r\n     } catch (err) {\r\n       console.error(err);\r\n-      return res.status(500).json({ message: \"Error fetching events\" });\r\n+      return res.status(500).json({ msg: \"Server error\" });\r\n     }\r\n+  } else {\r\n+    return res.status(405).json({ msg: \"Method not allowed\" });\r\n   }\r\n-\r\n-  if (method === \"POST\") {\r\n-    // Create new event\r\n-    try {\r\n-      const newEvent = new Event({ ...req.body, createdBy: admin.email });\r\n-      const savedEvent = await newEvent.save();\r\n-      await scheduleEventReminder(savedEvent);\r\n-      return res.status(201).json(savedEvent);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      return res.status(500).json({ message: \"Error creating event\" });\r\n-    }\r\n-  }\r\n-\r\n-  return res.status(405).json({ message: `Method ${method} not allowed` });\r\n }\r\n"
                },
                {
                    "date": 1757266929117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,44 @@\n-// /api/events/index.js\r\n-import connectDB from \"../../lib/db.js\";\r\n+// api/events/index.js\r\n+import { connectDB, Event } from \"../../lib/db.js\";\r\n import Event from \"../../models/event.js\";\r\n-import jwt from \"jsonwebtoken\";\r\n+import { scheduleEventReminder } from \"../../lib/reminderScheduler.js\";\r\n+import middleware from \"../../lib/middleware.js\";\r\n \r\n-await connectDB();\r\n-\r\n export default async function handler(req, res) {\r\n-  if (req.method === \"POST\") {\r\n-    const authHeader = req.headers.authorization;\r\n-    if (!authHeader?.startsWith(\"Bearer \")) {\r\n-      return res.status(401).json({ msg: \"No token, auth denied\" });\r\n-    }\r\n+  await connectDB();\r\n \r\n-    const token = authHeader.split(\" \")[1];\r\n-    let adminEmail;\r\n-    try {\r\n-      const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-      adminEmail = decoded.admin.email;\r\n-    } catch {\r\n-      return res.status(401).json({ msg: \"Token invalid\" });\r\n-    }\r\n+  // Authenticate admin\r\n+  const admin = middleware(req, res);\r\n+  if (!admin) return; // middleware already sent 401\r\n \r\n-    const { title, date, name, phone, type } = req.body;\r\n-    if (!title || !date || !name || !phone || !type) {\r\n-      return res.status(400).json({ msg: \"Missing required fields\" });\r\n-    }\r\n+  const { method } = req;\r\n \r\n+  if (method === \"GET\") {\r\n+    // GET all events by admin (not deleted)\r\n     try {\r\n-      const event = new Event({\r\n-        title,\r\n-        date,\r\n-        name,\r\n-        phone,\r\n-        type,\r\n-        createdBy: adminEmail,  // ✅ Add admin email here\r\n+      const events = await Event.find({\r\n+        createdBy: admin.email,\r\n+        status: { $ne: \"DELETED\" },\r\n       });\r\n-      await event.save();\r\n-      return res.status(201).json(event);\r\n+      return res.status(200).json(events);\r\n     } catch (err) {\r\n       console.error(err);\r\n-      return res.status(500).json({ msg: \"Server error\" });\r\n+      return res.status(500).json({ message: \"Error fetching events\" });\r\n     }\r\n-  } else {\r\n-    return res.status(405).json({ msg: \"Method not allowed\" });\r\n   }\r\n+\r\n+  if (method === \"POST\") {\r\n+    // Create new event\r\n+    try {\r\n+      const newEvent = new Event({ ...req.body, createdBy: admin.email });\r\n+      const savedEvent = await newEvent.save();\r\n+      await scheduleEventReminder(savedEvent);\r\n+      return res.status(201).json(savedEvent);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      return res.status(500).json({ message: \"Error creating event\" });\r\n+    }\r\n+  }\r\n+\r\n+  return res.status(405).json({ message: `Method ${method} not allowed` });\r\n }\r\n"
                },
                {
                    "date": 1757266984672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,67 @@\n-// api/events/index.js\r\n-import { connectDB, Event } from \"../../lib/db.js\";\r\n+// /api/events/index.js\r\n+import connectDB from \"../../lib/db.js\";\r\n import Event from \"../../models/event.js\";\r\n-import { scheduleEventReminder } from \"../../lib/reminderScheduler.js\";\r\n-import middleware from \"../../lib/middleware.js\";\r\n+import jwt from \"jsonwebtoken\";\r\n \r\n-export default async function handler(req, res) {\r\n-  await connectDB();\r\n+// No node-schedule for serverless; reminders should be handled via /api/reminders.js\r\n \r\n-  // Authenticate admin\r\n-  const admin = middleware(req, res);\r\n-  if (!admin) return; // middleware already sent 401\r\n+await connectDB();\r\n \r\n+export default async function handler(req, res) {\r\n   const { method } = req;\r\n \r\n+  // --- Authenticate admin ---\r\n+  const authHeader = req.headers.authorization;\r\n+  if (!authHeader?.startsWith(\"Bearer \")) {\r\n+    return res.status(401).json({ msg: \"No token, auth denied\" });\r\n+  }\r\n+\r\n+  let adminEmail;\r\n+  try {\r\n+    const token = authHeader.split(\" \")[1];\r\n+    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+    adminEmail = decoded.admin.email;\r\n+  } catch {\r\n+    return res.status(401).json({ msg: \"Token invalid\" });\r\n+  }\r\n+\r\n+  // --- GET all events ---\r\n   if (method === \"GET\") {\r\n-    // GET all events by admin (not deleted)\r\n     try {\r\n       const events = await Event.find({\r\n-        createdBy: admin.email,\r\n+        createdBy: adminEmail,\r\n         status: { $ne: \"DELETED\" },\r\n       });\r\n       return res.status(200).json(events);\r\n     } catch (err) {\r\n       console.error(err);\r\n-      return res.status(500).json({ message: \"Error fetching events\" });\r\n+      return res.status(500).json({ msg: \"Error fetching events\" });\r\n     }\r\n   }\r\n \r\n+  // --- POST create event ---\r\n   if (method === \"POST\") {\r\n-    // Create new event\r\n+    const { title, date, name, phone, type } = req.body;\r\n+    if (!title || !date || !name || !phone || !type) {\r\n+      return res.status(400).json({ msg: \"Missing required fields\" });\r\n+    }\r\n+\r\n     try {\r\n-      const newEvent = new Event({ ...req.body, createdBy: admin.email });\r\n-      const savedEvent = await newEvent.save();\r\n-      await scheduleEventReminder(savedEvent);\r\n+      const event = new Event({\r\n+        title,\r\n+        date,\r\n+        name,\r\n+        phone,\r\n+        type,\r\n+        createdBy: adminEmail,\r\n+      });\r\n+      const savedEvent = await event.save();\r\n       return res.status(201).json(savedEvent);\r\n     } catch (err) {\r\n       console.error(err);\r\n-      return res.status(500).json({ message: \"Error creating event\" });\r\n+      return res.status(500).json({ msg: \"Error creating event\" });\r\n     }\r\n   }\r\n \r\n-  return res.status(405).json({ message: `Method ${method} not allowed` });\r\n+  return res.status(405).json({ msg: `Method ${method} not allowed` });\r\n }\r\n"
                },
                {
                    "date": 1757267126083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,12 @@\n-// /api/events/index.js\r\n import connectDB from \"../../lib/db.js\";\r\n import Event from \"../../models/event.js\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n-// No node-schedule for serverless; reminders should be handled via /api/reminders.js\r\n-\r\n-await connectDB();\r\n-\r\n export default async function handler(req, res) {\r\n-  const { method } = req;\r\n+  await connectDB();\r\n \r\n-  // --- Authenticate admin ---\r\n+  // Get token\r\n   const authHeader = req.headers.authorization;\r\n   if (!authHeader?.startsWith(\"Bearer \")) {\r\n     return res.status(401).json({ msg: \"No token, auth denied\" });\r\n   }\r\n@@ -24,44 +19,29 @@\n   } catch {\r\n     return res.status(401).json({ msg: \"Token invalid\" });\r\n   }\r\n \r\n-  // --- GET all events ---\r\n-  if (method === \"GET\") {\r\n-    try {\r\n-      const events = await Event.find({\r\n-        createdBy: adminEmail,\r\n-        status: { $ne: \"DELETED\" },\r\n-      });\r\n-      return res.status(200).json(events);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      return res.status(500).json({ msg: \"Error fetching events\" });\r\n-    }\r\n-  }\r\n-\r\n-  // --- POST create event ---\r\n-  if (method === \"POST\") {\r\n+  if (req.method === \"POST\") {\r\n     const { title, date, name, phone, type } = req.body;\r\n     if (!title || !date || !name || !phone || !type) {\r\n       return res.status(400).json({ msg: \"Missing required fields\" });\r\n     }\r\n \r\n     try {\r\n-      const event = new Event({\r\n+      const newEvent = new Event({\r\n         title,\r\n         date,\r\n         name,\r\n         phone,\r\n         type,\r\n-        createdBy: adminEmail,\r\n+        createdBy: adminEmail, // must be set\r\n       });\r\n-      const savedEvent = await event.save();\r\n+      const savedEvent = await newEvent.save();\r\n       return res.status(201).json(savedEvent);\r\n     } catch (err) {\r\n       console.error(err);\r\n       return res.status(500).json({ msg: \"Error creating event\" });\r\n     }\r\n   }\r\n \r\n-  return res.status(405).json({ msg: `Method ${method} not allowed` });\r\n+  return res.status(405).json({ msg: \"Method not allowed\" });\r\n }\r\n"
                },
                {
                    "date": 1757267251676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,11 @@\n-import connectDB from \"../../lib/db.js\";\r\n-import Event from \"../../models/event.js\";\r\n+import connectDB, { Event } from \"../../lib/db.js\";\r\n import jwt from \"jsonwebtoken\";\r\n \r\n export default async function handler(req, res) {\r\n-  await connectDB();\r\n+  await connectDB(); // ✅ works now\r\n \r\n-  // Get token\r\n+  // Auth\r\n   const authHeader = req.headers.authorization;\r\n   if (!authHeader?.startsWith(\"Bearer \")) {\r\n     return res.status(401).json({ msg: \"No token, auth denied\" });\r\n   }\r\n@@ -19,9 +18,24 @@\n   } catch {\r\n     return res.status(401).json({ msg: \"Token invalid\" });\r\n   }\r\n \r\n-  if (req.method === \"POST\") {\r\n+  const { method } = req;\r\n+\r\n+  if (method === \"GET\") {\r\n+    try {\r\n+      const events = await Event.find({\r\n+        createdBy: adminEmail,\r\n+        status: { $ne: \"DELETED\" },\r\n+      });\r\n+      return res.status(200).json(events);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      return res.status(500).json({ msg: \"Error fetching events\" });\r\n+    }\r\n+  }\r\n+\r\n+  if (method === \"POST\") {\r\n     const { title, date, name, phone, type } = req.body;\r\n     if (!title || !date || !name || !phone || !type) {\r\n       return res.status(400).json({ msg: \"Missing required fields\" });\r\n     }\r\n@@ -32,9 +46,9 @@\n         date,\r\n         name,\r\n         phone,\r\n         type,\r\n-        createdBy: adminEmail, // must be set\r\n+        createdBy: adminEmail, // ✅ must include\r\n       });\r\n       const savedEvent = await newEvent.save();\r\n       return res.status(201).json(savedEvent);\r\n     } catch (err) {\r\n@@ -42,6 +56,6 @@\n       return res.status(500).json({ msg: \"Error creating event\" });\r\n     }\r\n   }\r\n \r\n-  return res.status(405).json({ msg: \"Method not allowed\" });\r\n+  return res.status(405).json({ msg: `Method ${method} not allowed` });\r\n }\r\n"
                },
                {
                    "date": 1757267534361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,61 +1,37 @@\n import connectDB, { Event } from \"../../lib/db.js\";\r\n-import jwt from \"jsonwebtoken\";\r\n+import middleware from \"../../lib/middleware.js\";\r\n \r\n export default async function handler(req, res) {\r\n-  await connectDB(); // ✅ works now\r\n+  await connectDB();\r\n \r\n-  // Auth\r\n-  const authHeader = req.headers.authorization;\r\n-  if (!authHeader?.startsWith(\"Bearer \")) {\r\n-    return res.status(401).json({ msg: \"No token, auth denied\" });\r\n-  }\r\n+  const admin = await middleware(req, res);\r\n+  if (!admin) return;\r\n \r\n-  let adminEmail;\r\n-  try {\r\n-    const token = authHeader.split(\" \")[1];\r\n-    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-    adminEmail = decoded.admin.email;\r\n-  } catch {\r\n-    return res.status(401).json({ msg: \"Token invalid\" });\r\n-  }\r\n-\r\n   const { method } = req;\r\n \r\n   if (method === \"GET\") {\r\n     try {\r\n       const events = await Event.find({\r\n-        createdBy: adminEmail,\r\n+        createdBy: admin.email,\r\n         status: { $ne: \"DELETED\" },\r\n       });\r\n       return res.status(200).json(events);\r\n     } catch (err) {\r\n       console.error(err);\r\n-      return res.status(500).json({ msg: \"Error fetching events\" });\r\n+      return res.status(500).json({ message: \"Error fetching events\" });\r\n     }\r\n   }\r\n \r\n   if (method === \"POST\") {\r\n-    const { title, date, name, phone, type } = req.body;\r\n-    if (!title || !date || !name || !phone || !type) {\r\n-      return res.status(400).json({ msg: \"Missing required fields\" });\r\n-    }\r\n-\r\n     try {\r\n-      const newEvent = new Event({\r\n-        title,\r\n-        date,\r\n-        name,\r\n-        phone,\r\n-        type,\r\n-        createdBy: adminEmail, // ✅ must include\r\n-      });\r\n+      const newEvent = new Event({ ...req.body, createdBy: admin.email });\r\n       const savedEvent = await newEvent.save();\r\n       return res.status(201).json(savedEvent);\r\n     } catch (err) {\r\n       console.error(err);\r\n-      return res.status(500).json({ msg: \"Error creating event\" });\r\n+      return res.status(500).json({ message: \"Error creating event\" });\r\n     }\r\n   }\r\n \r\n-  return res.status(405).json({ msg: `Method ${method} not allowed` });\r\n+  return res.status(405).json({ message: `Method ${method} not allowed` });\r\n }\r\n"
                },
                {
                    "date": 1757268123460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n-import connectDB, { Event } from \"../../lib/db.js\";\r\n-import middleware from \"../../lib/middleware.js\";\r\n+import connectDB from \"../../lib/db.js\";\r\n+import Event from \"../../models/event.js\";\r\n+import middleware from \"../../lib/middleware.js\"; // handles admin auth\r\n \r\n export default async function handler(req, res) {\r\n   await connectDB();\r\n \r\n-  const admin = await middleware(req, res);\r\n-  if (!admin) return;\r\n+  const admin = await middleware(req, res); // make sure middleware returns a promise\r\n+  if (!admin) return; // 401 already sent\r\n \r\n   const { method } = req;\r\n \r\n   if (method === \"GET\") {\r\n@@ -23,8 +24,9 @@\n   }\r\n \r\n   if (method === \"POST\") {\r\n     try {\r\n+      // ✅ Assign createdBy from authenticated admin\r\n       const newEvent = new Event({ ...req.body, createdBy: admin.email });\r\n       const savedEvent = await newEvent.save();\r\n       return res.status(201).json(savedEvent);\r\n     } catch (err) {\r\n"
                },
                {
                    "date": 1757440298450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,17 @@\n import connectDB from \"../../lib/db.js\";\r\n import Event from \"../../models/event.js\";\r\n-import middleware from \"../../lib/middleware.js\"; // handles admin auth\r\n+import { withAuth } from \"../../lib/middleware.js\";\r\n \r\n-export default async function handler(req, res) {\r\n+async function handler(req, res) {\r\n   await connectDB();\r\n \r\n-  const admin = await middleware(req, res); // make sure middleware returns a promise\r\n-  if (!admin) return; // 401 already sent\r\n-\r\n   const { method } = req;\r\n \r\n   if (method === \"GET\") {\r\n     try {\r\n       const events = await Event.find({\r\n-        createdBy: admin.email,\r\n+        createdBy: req.admin.email, // ✅ req.admin comes from withAuth\r\n         status: { $ne: \"DELETED\" },\r\n       });\r\n       return res.status(200).json(events);\r\n     } catch (err) {\r\n@@ -24,10 +21,12 @@\n   }\r\n \r\n   if (method === \"POST\") {\r\n     try {\r\n-      // ✅ Assign createdBy from authenticated admin\r\n-      const newEvent = new Event({ ...req.body, createdBy: admin.email });\r\n+      const newEvent = new Event({\r\n+        ...req.body,\r\n+        createdBy: req.admin.email, // ✅ automatically from JWT\r\n+      });\r\n       const savedEvent = await newEvent.save();\r\n       return res.status(201).json(savedEvent);\r\n     } catch (err) {\r\n       console.error(err);\r\n@@ -36,4 +35,6 @@\n   }\r\n \r\n   return res.status(405).json({ message: `Method ${method} not allowed` });\r\n }\r\n+\r\n+export default withAuth(handler);\r\n"
                },
                {
                    "date": 1757624650162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n     try {\r\n       const newEvent = new Event({\r\n         ...req.body,\r\n         createdBy: req.admin.email, // ✅ automatically from JWT\r\n+        reminderSent: false,\r\n       });\r\n       const savedEvent = await newEvent.save();\r\n       return res.status(201).json(savedEvent);\r\n     } catch (err) {\r\n"
                },
                {
                    "date": 1757625078666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     try {\r\n       const newEvent = new Event({\r\n         ...req.body,\r\n         createdBy: req.admin.email, // ✅ automatically from JWT\r\n-        reminderSent: false,\r\n+        reminderSent: false\r\n       });\r\n       const savedEvent = await newEvent.save();\r\n       return res.status(201).json(savedEvent);\r\n     } catch (err) {\r\n"
                }
            ],
            "date": 1757263491901,
            "name": "Commit-0",
            "content": "import { connectDB, Event } from '../../../lib/db';\r\nimport { scheduleEventReminder } from '../../../lib/reminderScheduler';\r\nimport middleware from '../../../lib/middleware';\r\n\r\nconnectDB();\r\n\r\nexport default async function handler(req, res) {\r\n  const reqWithAdmin = await middleware(req, res); // attach req.admin\r\n  if (!reqWithAdmin) return; // middleware handles response if not authorized\r\n\r\n  const adminEmail = reqWithAdmin.admin.email;\r\n\r\n  if (req.method === \"GET\") {\r\n    const events = await Event.find({ createdBy: adminEmail, status: { $ne: 'DELETED' } });\r\n    return res.status(200).json(events);\r\n  }\r\n\r\n  if (req.method === \"POST\") {\r\n    const newEvent = new Event({ ...req.body, createdBy: adminEmail });\r\n    const savedEvent = await newEvent.save();\r\n    scheduleEventReminder(savedEvent);\r\n    return res.status(201).json(savedEvent);\r\n  }\r\n\r\n  return res.status(405).json({ message: \"Method not allowed\" });\r\n}\r\n"
        }
    ]
}