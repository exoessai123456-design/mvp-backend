{
    "sourceFile": "api/events/[eventId].js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1757263507240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757263929159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import { connectDB, Event } from '../../../lib/db';\r\n-import { scheduleEventReminder } from '../../../lib/reminderScheduler';\r\n import middleware from '../../../lib/middleware';\r\n \r\n connectDB();\r\n \r\n@@ -10,26 +9,23 @@\n \r\n   const adminEmail = reqWithAdmin.admin.email;\r\n   const { id } = req.query;\r\n \r\n+  if (req.method === \"GET\") {\r\n+    const event = await Event.findOne({ _id: id, createdBy: adminEmail });\r\n+    if (!event) return res.status(404).json({ message: \"Event not found\" });\r\n+    return res.json(event);\r\n+  }\r\n+\r\n   if (req.method === \"PUT\") {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: id, createdBy: adminEmail },\r\n-      req.body,\r\n-      { new: true }\r\n-    );\r\n+    const event = await Event.findOneAndUpdate({ _id: id, createdBy: adminEmail }, req.body, { new: true });\r\n     if (!event) return res.status(404).json({ message: \"Event not found or unauthorized\" });\r\n-    scheduleEventReminder(event);\r\n-    return res.status(200).json(event);\r\n+    return res.json(event);\r\n   }\r\n \r\n   if (req.method === \"DELETE\") {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: id, createdBy: adminEmail },\r\n-      { status: 'DELETED' }\r\n-    );\r\n+    const event = await Event.findOneAndUpdate({ _id: id, createdBy: adminEmail }, { status: 'DELETED' });\r\n     if (!event) return res.status(404).json({ message: \"Event not found or unauthorized\" });\r\n-    scheduleEventReminder(event);\r\n     return res.status(204).end();\r\n   }\r\n \r\n   return res.status(405).json({ message: \"Method not allowed\" });\r\n"
                },
                {
                    "date": 1757264136248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-import { connectDB, Event } from '../../../lib/db';\r\n-import middleware from '../../../lib/middleware';\r\n+import { connectDB, Event } from '../../lib/db.js';\r\n+import middleware from '../../lib/middleware.js';\r\n \r\n connectDB();\r\n \r\n export default async function handler(req, res) {\r\n"
                },
                {
                    "date": 1757265663161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,35 @@\n-import { connectDB, Event } from '../../lib/db.js';\r\n-import middleware from '../../lib/middleware.js';\r\n+import connectDB from \"../../lib/db.js\";\r\n+import Event from \"../../models/event.js\"; \r\n+import { scheduleEventReminder } from \"../../utils/reminderScheduler.js\";\r\n+import middleware from \"../../middleware/middleware.js\";\r\n \r\n-connectDB();\r\n-\r\n export default async function handler(req, res) {\r\n-  const reqWithAdmin = await middleware(req, res);\r\n-  if (!reqWithAdmin) return;\r\n+  await connectDB();\r\n+  const admin = await middleware(req, res);\r\n+  if (!admin) return;\r\n \r\n-  const adminEmail = reqWithAdmin.admin.email;\r\n-  const { id } = req.query;\r\n+  const { eventId } = req.query;\r\n \r\n-  if (req.method === \"GET\") {\r\n-    const event = await Event.findOne({ _id: id, createdBy: adminEmail });\r\n-    if (!event) return res.status(404).json({ message: \"Event not found\" });\r\n-    return res.json(event);\r\n-  }\r\n+  const event = await Event.findOne({ _id: eventId, createdBy: admin.email });\r\n \r\n+  if (!event) return res.status(404).json({ message: \"Event not found\" });\r\n+\r\n+  if (req.method === \"GET\") return res.json(event);\r\n+\r\n   if (req.method === \"PUT\") {\r\n-    const event = await Event.findOneAndUpdate({ _id: id, createdBy: adminEmail }, req.body, { new: true });\r\n-    if (!event) return res.status(404).json({ message: \"Event not found or unauthorized\" });\r\n+    Object.assign(event, req.body);\r\n+    await event.save();\r\n+    scheduleEventReminder(event);\r\n     return res.json(event);\r\n   }\r\n \r\n   if (req.method === \"DELETE\") {\r\n-    const event = await Event.findOneAndUpdate({ _id: id, createdBy: adminEmail }, { status: 'DELETED' });\r\n-    if (!event) return res.status(404).json({ message: \"Event not found or unauthorized\" });\r\n-    return res.status(204).end();\r\n+    event.status = \"DELETED\";\r\n+    await event.save();\r\n+    scheduleEventReminder(event);\r\n+    return res.status(200).json({ message: `Event ${eventId} deleted` });\r\n   }\r\n \r\n-  return res.status(405).json({ message: \"Method not allowed\" });\r\n+  res.setHeader(\"Allow\", [\"GET\", \"PUT\", \"DELETE\"]);\r\n+  return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n }\r\n"
                },
                {
                    "date": 1757266431450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,63 @@\n-import connectDB from \"../../lib/db.js\";\r\n-import Event from \"../../models/event.js\"; \r\n-import { scheduleEventReminder } from \"../../utils/reminderScheduler.js\";\r\n-import middleware from \"../../middleware/middleware.js\";\r\n+// api/events/[eventId].js\r\n+import { connectDB } from \"../../lib/db.js\";\r\n+import Event from \"../../models/event.js\";\r\n+import { scheduleEventReminder } from \"../../lib/reminderScheduler.js\";\r\n+import middleware from \"../../lib/middleware.js\";\r\n \r\n export default async function handler(req, res) {\r\n   await connectDB();\r\n-  const admin = await middleware(req, res);\r\n+\r\n+  const admin = middleware(req, res);\r\n   if (!admin) return;\r\n \r\n+  const { method } = req;\r\n   const { eventId } = req.query;\r\n \r\n-  const event = await Event.findOne({ _id: eventId, createdBy: admin.email });\r\n+  // GET single event by ID\r\n+  if (method === \"GET\") {\r\n+    try {\r\n+      const event = await Event.findOne({ _id: eventId, createdBy: admin.email });\r\n+      if (!event) return res.status(404).json({ message: \"Event not found\" });\r\n+      return res.status(200).json(event);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      return res.status(500).json({ message: \"Error fetching event\" });\r\n+    }\r\n+  }\r\n \r\n-  if (!event) return res.status(404).json({ message: \"Event not found\" });\r\n+  // PUT update event\r\n+  if (method === \"PUT\") {\r\n+    try {\r\n+      const event = await Event.findOneAndUpdate(\r\n+        { _id: eventId, createdBy: admin.email },\r\n+        req.body,\r\n+        { new: true }\r\n+      );\r\n+      if (!event) return res.status(404).json({ message: \"Event not found or unauthorized\" });\r\n \r\n-  if (req.method === \"GET\") return res.json(event);\r\n-\r\n-  if (req.method === \"PUT\") {\r\n-    Object.assign(event, req.body);\r\n-    await event.save();\r\n-    scheduleEventReminder(event);\r\n-    return res.json(event);\r\n+      await scheduleEventReminder(event); // serverless reminder\r\n+      return res.status(200).json(event);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      return res.status(500).json({ message: \"Error updating event\" });\r\n+    }\r\n   }\r\n \r\n-  if (req.method === \"DELETE\") {\r\n-    event.status = \"DELETED\";\r\n-    await event.save();\r\n-    scheduleEventReminder(event);\r\n-    return res.status(200).json({ message: `Event ${eventId} deleted` });\r\n+  // DELETE (soft delete)\r\n+  if (method === \"DELETE\") {\r\n+    try {\r\n+      const event = await Event.findOneAndUpdate(\r\n+        { _id: eventId, createdBy: admin.email },\r\n+        { status: \"DELETED\" },\r\n+        { new: true }\r\n+      );\r\n+      if (!event) return res.status(404).json({ message: \"Event not found or unauthorized\" });\r\n+      return res.status(200).json({ message: `Event ${eventId} deleted` });\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      return res.status(500).json({ message: \"Error deleting event\" });\r\n+    }\r\n   }\r\n \r\n-  res.setHeader(\"Allow\", [\"GET\", \"PUT\", \"DELETE\"]);\r\n-  return res.status(405).end(`Method ${req.method} Not Allowed`);\r\n+  return res.status(405).json({ message: `Method ${method} not allowed` });\r\n }\r\n"
                },
                {
                    "date": 1757266605480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n // api/events/[eventId].js\r\n-import { connectDB } from \"../../lib/db.js\";\r\n+import { connectDB, Event } from \"../../lib/db.js\";\r\n import Event from \"../../models/event.js\";\r\n import { scheduleEventReminder } from \"../../lib/reminderScheduler.js\";\r\n import middleware from \"../../lib/middleware.js\";\r\n \r\n"
                },
                {
                    "date": 1757267032428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,63 +1,57 @@\n-// api/events/[eventId].js\r\n-import { connectDB, Event } from \"../../lib/db.js\";\r\n+// /api/events/[eventId].js\r\n+import connectDB from \"../../lib/db.js\";\r\n import Event from \"../../models/event.js\";\r\n-import { scheduleEventReminder } from \"../../lib/reminderScheduler.js\";\r\n-import middleware from \"../../lib/middleware.js\";\r\n+import jwt from \"jsonwebtoken\";\r\n \r\n+await connectDB();\r\n+\r\n export default async function handler(req, res) {\r\n-  await connectDB();\r\n+  const { method, query: { eventId } } = req;\r\n \r\n-  const admin = middleware(req, res);\r\n-  if (!admin) return;\r\n+  // --- Authenticate admin ---\r\n+  const authHeader = req.headers.authorization;\r\n+  if (!authHeader?.startsWith(\"Bearer \")) {\r\n+    return res.status(401).json({ msg: \"No token, auth denied\" });\r\n+  }\r\n \r\n-  const { method } = req;\r\n-  const { eventId } = req.query;\r\n+  let adminEmail;\r\n+  try {\r\n+    const token = authHeader.split(\" \")[1];\r\n+    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+    adminEmail = decoded.admin.email;\r\n+  } catch {\r\n+    return res.status(401).json({ msg: \"Token invalid\" });\r\n+  }\r\n \r\n-  // GET single event by ID\r\n+  // --- GET by ID ---\r\n   if (method === \"GET\") {\r\n-    try {\r\n-      const event = await Event.findOne({ _id: eventId, createdBy: admin.email });\r\n-      if (!event) return res.status(404).json({ message: \"Event not found\" });\r\n-      return res.status(200).json(event);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      return res.status(500).json({ message: \"Error fetching event\" });\r\n-    }\r\n+    const event = await Event.findOne({ _id: eventId, createdBy: adminEmail });\r\n+    if (!event) return res.status(404).json({ msg: \"Event not found\" });\r\n+    return res.status(200).json(event);\r\n   }\r\n \r\n-  // PUT update event\r\n+  // --- PUT update ---\r\n   if (method === \"PUT\") {\r\n-    try {\r\n-      const event = await Event.findOneAndUpdate(\r\n-        { _id: eventId, createdBy: admin.email },\r\n-        req.body,\r\n-        { new: true }\r\n-      );\r\n-      if (!event) return res.status(404).json({ message: \"Event not found or unauthorized\" });\r\n-\r\n-      await scheduleEventReminder(event); // serverless reminder\r\n-      return res.status(200).json(event);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      return res.status(500).json({ message: \"Error updating event\" });\r\n-    }\r\n+    const updatedData = req.body;\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: eventId, createdBy: adminEmail },\r\n+      updatedData,\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ msg: \"Event not found or unauthorized\" });\r\n+    return res.status(200).json(event);\r\n   }\r\n \r\n-  // DELETE (soft delete)\r\n+  // --- DELETE ---\r\n   if (method === \"DELETE\") {\r\n-    try {\r\n-      const event = await Event.findOneAndUpdate(\r\n-        { _id: eventId, createdBy: admin.email },\r\n-        { status: \"DELETED\" },\r\n-        { new: true }\r\n-      );\r\n-      if (!event) return res.status(404).json({ message: \"Event not found or unauthorized\" });\r\n-      return res.status(200).json({ message: `Event ${eventId} deleted` });\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      return res.status(500).json({ message: \"Error deleting event\" });\r\n-    }\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: eventId, createdBy: adminEmail },\r\n+      { status: \"DELETED\" },\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ msg: \"Event not found or unauthorized\" });\r\n+    return res.status(200).json({ msg: `Event ${eventId} deleted` });\r\n   }\r\n \r\n-  return res.status(405).json({ message: `Method ${method} not allowed` });\r\n+  return res.status(405).json({ msg: `Method ${method} not allowed` });\r\n }\r\n"
                },
                {
                    "date": 1757267546069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,48 @@\n-// /api/events/[eventId].js\r\n-import connectDB from \"../../lib/db.js\";\r\n-import Event from \"../../models/event.js\";\r\n-import jwt from \"jsonwebtoken\";\r\n+import connectDB, { Event } from \"../../lib/db.js\";\r\n+import middleware from \"../../lib/middleware.js\";\r\n \r\n-await connectDB();\r\n-\r\n export default async function handler(req, res) {\r\n-  const { method, query: { eventId } } = req;\r\n+  await connectDB();\r\n \r\n-  // --- Authenticate admin ---\r\n-  const authHeader = req.headers.authorization;\r\n-  if (!authHeader?.startsWith(\"Bearer \")) {\r\n-    return res.status(401).json({ msg: \"No token, auth denied\" });\r\n-  }\r\n+  const admin = await middleware(req, res);\r\n+  if (!admin) return;\r\n \r\n-  let adminEmail;\r\n+  const { method, query, body } = req;\r\n+  const { eventId } = query;\r\n+\r\n   try {\r\n-    const token = authHeader.split(\" \")[1];\r\n-    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-    adminEmail = decoded.admin.email;\r\n-  } catch {\r\n-    return res.status(401).json({ msg: \"Token invalid\" });\r\n-  }\r\n+    if (method === \"GET\") {\r\n+      const event = await Event.findOne({\r\n+        _id: eventId,\r\n+        createdBy: admin.email,\r\n+      });\r\n+      if (!event) return res.status(404).json({ msg: \"Event not found\" });\r\n+      return res.json(event);\r\n+    }\r\n \r\n-  // --- GET by ID ---\r\n-  if (method === \"GET\") {\r\n-    const event = await Event.findOne({ _id: eventId, createdBy: adminEmail });\r\n-    if (!event) return res.status(404).json({ msg: \"Event not found\" });\r\n-    return res.status(200).json(event);\r\n-  }\r\n+    if (method === \"PUT\") {\r\n+      const updated = await Event.findOneAndUpdate(\r\n+        { _id: eventId, createdBy: admin.email },\r\n+        body,\r\n+        { new: true }\r\n+      );\r\n+      if (!updated) return res.status(404).json({ msg: \"Event not found\" });\r\n+      return res.json(updated);\r\n+    }\r\n \r\n-  // --- PUT update ---\r\n-  if (method === \"PUT\") {\r\n-    const updatedData = req.body;\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: eventId, createdBy: adminEmail },\r\n-      updatedData,\r\n-      { new: true }\r\n-    );\r\n-    if (!event) return res.status(404).json({ msg: \"Event not found or unauthorized\" });\r\n-    return res.status(200).json(event);\r\n-  }\r\n+    if (method === \"DELETE\") {\r\n+      const deleted = await Event.findOneAndUpdate(\r\n+        { _id: eventId, createdBy: admin.email },\r\n+        { status: \"DELETED\" },\r\n+        { new: true }\r\n+      );\r\n+      if (!deleted) return res.status(404).json({ msg: \"Event not found\" });\r\n+      return res.status(204).end();\r\n+    }\r\n \r\n-  // --- DELETE ---\r\n-  if (method === \"DELETE\") {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: eventId, createdBy: adminEmail },\r\n-      { status: \"DELETED\" },\r\n-      { new: true }\r\n-    );\r\n-    if (!event) return res.status(404).json({ msg: \"Event not found or unauthorized\" });\r\n-    return res.status(200).json({ msg: `Event ${eventId} deleted` });\r\n+    return res.status(405).json({ msg: `Method ${method} not allowed` });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    return res.status(500).json({ msg: \"Server error\" });\r\n   }\r\n-\r\n-  return res.status(405).json({ msg: `Method ${method} not allowed` });\r\n }\r\n"
                },
                {
                    "date": 1757440081209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import connectDB, { Event } from \"../../lib/db.js\";\r\n import middleware from \"../../lib/middleware.js\";\r\n+import { withAuth } from \"@/lib/middleware\";\r\n \r\n export default async function handler(req, res) {\r\n   await connectDB();\r\n \r\n"
                },
                {
                    "date": 1757440087580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+import connectDB, { Event } from \"../../lib/db.js\";\r\n+import middleware from \"../../lib/middleware.js\";\r\n+import { withAuth } from \"@/lib/middleware\";\r\n+\r\n+async function handler(req, res) {\r\n+  await connectDB();\r\n+\r\n+  const admin = await middleware(req, res);\r\n+  if (!admin) return;\r\n+\r\n+  const { method, query, body } = req;\r\n+  const { eventId } = query;\r\n+\r\n+  try {\r\n+    if (method === \"GET\") {\r\n+      const event = await Event.findOne({\r\n+        _id: eventId,\r\n+        createdBy: admin.email,\r\n+      });\r\n+      if (!event) return res.status(404).json({ msg: \"Event not found\" });\r\n+      return res.json(event);\r\n+    }\r\n+\r\n+    if (method === \"PUT\") {\r\n+      const updated = await Event.findOneAndUpdate(\r\n+        { _id: eventId, createdBy: admin.email },\r\n+        body,\r\n+        { new: true }\r\n+      );\r\n+      if (!updated) return res.status(404).json({ msg: \"Event not found\" });\r\n+      return res.json(updated);\r\n+    }\r\n+\r\n+    if (method === \"DELETE\") {\r\n+      const deleted = await Event.findOneAndUpdate(\r\n+        { _id: eventId, createdBy: admin.email },\r\n+        { status: \"DELETED\" },\r\n+        { new: true }\r\n+      );\r\n+      if (!deleted) return res.status(404).json({ msg: \"Event not found\" });\r\n+      return res.status(204).end();\r\n+    }\r\n+\r\n+    return res.status(405).json({ msg: `Method ${method} not allowed` });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    return res.status(500).json({ msg: \"Server error\" });\r\n+  }\r\n+}\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1757440098959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+import connectDB, { Event } from \"../../lib/db.js\";\r\n+import middleware from \"../../lib/middleware.js\";\r\n+import { withAuth } from \"@/lib/middleware\";\r\n+\r\n+async function handler(req, res) {\r\n+  await connectDB();\r\n+\r\n+  const admin = await middleware(req, res);\r\n+  if (!admin) return;\r\n+\r\n+  const { method, query, body } = req;\r\n+  const { eventId } = query;\r\n+\r\n+  try {\r\n+    if (method === \"GET\") {\r\n+      const event = await Event.findOne({\r\n+        _id: eventId,\r\n+        createdBy: admin.email,\r\n+      });\r\n+      if (!event) return res.status(404).json({ msg: \"Event not found\" });\r\n+      return res.json(event);\r\n+    }\r\n+\r\n+    if (method === \"PUT\") {\r\n+      const updated = await Event.findOneAndUpdate(\r\n+        { _id: eventId, createdBy: admin.email },\r\n+        body,\r\n+        { new: true }\r\n+      );\r\n+      if (!updated) return res.status(404).json({ msg: \"Event not found\" });\r\n+      return res.json(updated);\r\n+    }\r\n+\r\n+    if (method === \"DELETE\") {\r\n+      const deleted = await Event.findOneAndUpdate(\r\n+        { _id: eventId, createdBy: admin.email },\r\n+        { status: \"DELETED\" },\r\n+        { new: true }\r\n+      );\r\n+      if (!deleted) return res.status(404).json({ msg: \"Event not found\" });\r\n+      return res.status(204).end();\r\n+    }\r\n+\r\n+    return res.status(405).json({ msg: `Method ${method} not allowed` });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    return res.status(500).json({ msg: \"Server error\" });\r\n+  }\r\n+}\r\n+\r\n+\r\n+export default withAuth(handler);\r\n"
                },
                {
                    "date": 1757440138316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,105 +49,4 @@\n }\r\n \r\n \r\n export default withAuth(handler);\r\n-import connectDB, { Event } from \"../../lib/db.js\";\r\n-import middleware from \"../../lib/middleware.js\";\r\n-import { withAuth } from \"@/lib/middleware\";\r\n-\r\n-async function handler(req, res) {\r\n-  await connectDB();\r\n-\r\n-  const admin = await middleware(req, res);\r\n-  if (!admin) return;\r\n-\r\n-  const { method, query, body } = req;\r\n-  const { eventId } = query;\r\n-\r\n-  try {\r\n-    if (method === \"GET\") {\r\n-      const event = await Event.findOne({\r\n-        _id: eventId,\r\n-        createdBy: admin.email,\r\n-      });\r\n-      if (!event) return res.status(404).json({ msg: \"Event not found\" });\r\n-      return res.json(event);\r\n-    }\r\n-\r\n-    if (method === \"PUT\") {\r\n-      const updated = await Event.findOneAndUpdate(\r\n-        { _id: eventId, createdBy: admin.email },\r\n-        body,\r\n-        { new: true }\r\n-      );\r\n-      if (!updated) return res.status(404).json({ msg: \"Event not found\" });\r\n-      return res.json(updated);\r\n-    }\r\n-\r\n-    if (method === \"DELETE\") {\r\n-      const deleted = await Event.findOneAndUpdate(\r\n-        { _id: eventId, createdBy: admin.email },\r\n-        { status: \"DELETED\" },\r\n-        { new: true }\r\n-      );\r\n-      if (!deleted) return res.status(404).json({ msg: \"Event not found\" });\r\n-      return res.status(204).end();\r\n-    }\r\n-\r\n-    return res.status(405).json({ msg: `Method ${method} not allowed` });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    return res.status(500).json({ msg: \"Server error\" });\r\n-  }\r\n-}\r\n-\r\n-\r\n-\r\n-import connectDB, { Event } from \"../../lib/db.js\";\r\n-import middleware from \"../../lib/middleware.js\";\r\n-import { withAuth } from \"@/lib/middleware\";\r\n-\r\n-export default async function handler(req, res) {\r\n-  await connectDB();\r\n-\r\n-  const admin = await middleware(req, res);\r\n-  if (!admin) return;\r\n-\r\n-  const { method, query, body } = req;\r\n-  const { eventId } = query;\r\n-\r\n-  try {\r\n-    if (method === \"GET\") {\r\n-      const event = await Event.findOne({\r\n-        _id: eventId,\r\n-        createdBy: admin.email,\r\n-      });\r\n-      if (!event) return res.status(404).json({ msg: \"Event not found\" });\r\n-      return res.json(event);\r\n-    }\r\n-\r\n-    if (method === \"PUT\") {\r\n-      const updated = await Event.findOneAndUpdate(\r\n-        { _id: eventId, createdBy: admin.email },\r\n-        body,\r\n-        { new: true }\r\n-      );\r\n-      if (!updated) return res.status(404).json({ msg: \"Event not found\" });\r\n-      return res.json(updated);\r\n-    }\r\n-\r\n-    if (method === \"DELETE\") {\r\n-      const deleted = await Event.findOneAndUpdate(\r\n-        { _id: eventId, createdBy: admin.email },\r\n-        { status: \"DELETED\" },\r\n-        { new: true }\r\n-      );\r\n-      if (!deleted) return res.status(404).json({ msg: \"Event not found\" });\r\n-      return res.status(204).end();\r\n-    }\r\n-\r\n-    return res.status(405).json({ msg: `Method ${method} not allowed` });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    return res.status(500).json({ msg: \"Server error\" });\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1757440178844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import connectDB, { Event } from \"../../lib/db.js\";\r\n import middleware from \"../../lib/middleware.js\";\r\n import { withAuth } from \"@/lib/middleware\";\r\n \r\n-async function handler(req, res) {\r\n+export default async function handler(req, res) {\r\n   await connectDB();\r\n \r\n   const admin = await middleware(req, res);\r\n   if (!admin) return;\r\n@@ -46,7 +46,4 @@\n     console.error(err);\r\n     return res.status(500).json({ msg: \"Server error\" });\r\n   }\r\n }\r\n-\r\n-\r\n-export default withAuth(handler);\r\n"
                },
                {
                    "date": 1757440248742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,26 @@\n import connectDB, { Event } from \"../../lib/db.js\";\r\n-import middleware from \"../../lib/middleware.js\";\r\n-import { withAuth } from \"@/lib/middleware\";\r\n+import { withAuth } from \"../../lib/middleware.js\";\r\n \r\n-export default async function handler(req, res) {\r\n+async function handler(req, res) {\r\n   await connectDB();\r\n \r\n-  const admin = await middleware(req, res);\r\n-  if (!admin) return;\r\n-\r\n   const { method, query, body } = req;\r\n   const { eventId } = query;\r\n \r\n   try {\r\n     if (method === \"GET\") {\r\n       const event = await Event.findOne({\r\n         _id: eventId,\r\n-        createdBy: admin.email,\r\n+        createdBy: req.admin.email, // ✅ req.admin comes from withAuth\r\n       });\r\n       if (!event) return res.status(404).json({ msg: \"Event not found\" });\r\n       return res.json(event);\r\n     }\r\n \r\n     if (method === \"PUT\") {\r\n       const updated = await Event.findOneAndUpdate(\r\n-        { _id: eventId, createdBy: admin.email },\r\n+        { _id: eventId, createdBy: req.admin.email },\r\n         body,\r\n         { new: true }\r\n       );\r\n       if (!updated) return res.status(404).json({ msg: \"Event not found\" });\r\n@@ -32,9 +28,9 @@\n     }\r\n \r\n     if (method === \"DELETE\") {\r\n       const deleted = await Event.findOneAndUpdate(\r\n-        { _id: eventId, createdBy: admin.email },\r\n+        { _id: eventId, createdBy: req.admin.email },\r\n         { status: \"DELETED\" },\r\n         { new: true }\r\n       );\r\n       if (!deleted) return res.status(404).json({ msg: \"Event not found\" });\r\n@@ -46,4 +42,6 @@\n     console.error(err);\r\n     return res.status(500).json({ msg: \"Server error\" });\r\n   }\r\n }\r\n+\r\n+export default withAuth(handler);\r\n"
                },
                {
                    "date": 1757624664644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+import connectDB, { Event } from \"../../lib/db.js\";\r\n+import { withAuth } from \"../../lib/middleware.js\";\r\n+\r\n+async function handler(req, res) {\r\n+  await connectDB();\r\n+\r\n+  const { method, query, body } = req;\r\n+  const { eventId } = query;\r\n+\r\n+  try {\r\n+    if (method === \"GET\") {\r\n+      const event = await Event.findOne({\r\n+        _id: eventId,\r\n+        createdBy: req.admin.email, // ✅ req.admin comes from withAuth\r\n+      });\r\n+      if (!event) return res.status(404).json({ msg: \"Event not found\" });\r\n+      return res.json(event);\r\n+    }\r\n+\r\n+    if (method === \"PUT\") {\r\n+      const updated = await Event.findOneAndUpdate(\r\n+        { _id: eventId, createdBy: req.admin.email },\r\n+        body,\r\n+        { new: true }\r\n+      );\r\n+      if (!updated) return res.status(404).json({ msg: \"Event not found\" });\r\n+      return res.json(updated);\r\n+    }\r\n+\r\n+    if (method === \"DELETE\") {\r\n+      const deleted = await Event.findOneAndUpdate(\r\n+        { _id: eventId, createdBy: req.admin.email },\r\n+        { status: \"DELETED\" },\r\n+        { new: true }\r\n+      );\r\n+      if (!deleted) return res.status(404).json({ msg: \"Event not found\" });\r\n+      return res.status(204).end();\r\n+    }\r\n+\r\n+    return res.status(405).json({ msg: `Method ${method} not allowed` });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    return res.status(500).json({ msg: \"Server error\" });\r\n+  }\r\n+}\r\n+\r\n+export default withAuth(handler);\r\n"
                }
            ],
            "date": 1757263507240,
            "name": "Commit-0",
            "content": "import { connectDB, Event } from '../../../lib/db';\r\nimport { scheduleEventReminder } from '../../../lib/reminderScheduler';\r\nimport middleware from '../../../lib/middleware';\r\n\r\nconnectDB();\r\n\r\nexport default async function handler(req, res) {\r\n  const reqWithAdmin = await middleware(req, res);\r\n  if (!reqWithAdmin) return;\r\n\r\n  const adminEmail = reqWithAdmin.admin.email;\r\n  const { id } = req.query;\r\n\r\n  if (req.method === \"PUT\") {\r\n    const event = await Event.findOneAndUpdate(\r\n      { _id: id, createdBy: adminEmail },\r\n      req.body,\r\n      { new: true }\r\n    );\r\n    if (!event) return res.status(404).json({ message: \"Event not found or unauthorized\" });\r\n    scheduleEventReminder(event);\r\n    return res.status(200).json(event);\r\n  }\r\n\r\n  if (req.method === \"DELETE\") {\r\n    const event = await Event.findOneAndUpdate(\r\n      { _id: id, createdBy: adminEmail },\r\n      { status: 'DELETED' }\r\n    );\r\n    if (!event) return res.status(404).json({ message: \"Event not found or unauthorized\" });\r\n    scheduleEventReminder(event);\r\n    return res.status(204).end();\r\n  }\r\n\r\n  return res.status(405).json({ message: \"Method not allowed\" });\r\n}\r\n"
        }
    ]
}